{"version":3,"sources":["helpers.js","components/YearSlider.js","components/EventSelect.js","components/CountrySelect.js","idioms/chord.js","components/MigrationSwitch.js","idioms/graph.js","idioms/map.js","index.js"],"names":["stateEmitter","EventEmitter","years","colors","map","d3","selection","slice","getCountries","setCountries","clearCountries","addCountry","countryId","countries","Set","add","remCountry","delete","getYear","store","get","setYear","value","set","emit","getMigration","setMigration","Array","from","dataYear","country","countryName","code","filterNaN","obj","res","key","num","Number","isNaN","byId","id","document","getElementById","createSVG","dims","arguments","length","undefined","width","height","margins","svg","append","attr","concat","left","top","marks","yearChange","params","forEach","year","YearSlider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","on","setState","react_default","a","createElement","style","padding","es","min","max","included","step","onChange","defaultValue","handleStyle","border","backgroundColor","React","Component","EventSelect","events","options","event","i","name","push","label","react_select_esm","assign","selected","action","_events$selected$valu","countriesList","split","actualYear","console","log","placeholder","components","makeAnimated","onBlurResetsInput","onSelectResetsInput","onCloseResetsInput","theme","objectSpread","borderRadius","neutral0","neutral5","neutral10","neutral20","primary25","neutral50","neutral80","PureComponent","codeToName","handleChange","option","removedValue","chordSVG","migrationData","outerRadius","innerRadius","CountrySelect","c","countryData","data","keys","sort","b","isMulti","MigrationSwitch","checked","bind","assertThisInitialized","react_switch_default","onColor","offColor","onHandleColor","offHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","chord","draw","el","querySelector","_ref","clientWidth","clientHeight","Math","updateChord","update","getChordMatrix","isEmigration","matrix","c2","val","error","getValue","groupNodes","select","groupArcs","selectAll","remove","chords","padAngle","myChord","ribbon","radius","color","domain","range","arc","groups","enter","d","s","classed","p","source","index","target","text","countryOrder","valueOrder","_countryOrder$map","_countryOrder$map2","slicedToArray","c1","_valueOrder$map","_valueOrder$map2","v1","v2","makeTitle","graphSVG","svgDims","selectedCountries","compareData","populationData","graph","whrData","pop","margin","updateGraph","right","bottom","metrics","loadCompareDataset","dataset","entry","parseNaN","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","migrants","err","return","loadDataset","compareDataset","flatData","values","reduce","acc","axisDomain","fn","yearScale","nice","migrantsScale","metricsScale","metric","xAxis","tickFormat","yAxis1","line","x","y","curve","ms","countriesGroup","_loop","coName","countryGroup","datum","g","preventDefault","metricsGroup","met","defined","metricGroup","mapSVG","idioms_map","topology","population","projection","scale","translate","path","zoom","scaleExtent","transform","features","properties","clickLeft","mouseIn","mouseOut","clickRight","updateMap","includes","getMigrants","countryID","filesPromise","json","tsv","Promise","all","then","dataResults","_data","conversion","migrationDiff","previousYear","dataYears","indexOf","thisValue","prevValue","getMigrationDiff","countryPop","countryWHR","Country","code3","ReactDOM","render","CountrySelect_CountrySelect","EventSelect_EventSelect","MigrationSwitch_MigrationSwitch","YearSlider_YearSlider","handleData"],"mappings":"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","file":"static/js/main.07af2ebe.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport store from 'store';\nimport EventEmitter from 'events';\n\nclass SelectionEmitter extends EventEmitter { }\n\nexport const stateEmitter = new SelectionEmitter();\n\nexport const years = [1995, 2000, 2005, 2010, 2015, 2017];\n\nexport function tryNumber(value) {\n  return Number(value) || value;\n}\n\nexport const colors = {\n  map: d3.schemeBlues[9],\n  selection: d3.schemePaired.slice(2),\n};\n\nexport const selection = {\n  getCountries, setCountries, clearCountries,\n  addCountry, remCountry,\n  getYear: () => store.get('year'),\n  setYear,\n  getMigration: () => store.get('isEmigration'),\n  setMigration,\n};\n\nfunction setYear(value) {\n  store.set('year', value);\n  stateEmitter.emit('yearChanged');\n}\n\nfunction setMigration(value) {\n  store.set('isEmigration', value);\n  stateEmitter.emit('migrationChanged');\n}\n\nfunction getCountries() {\n  return store.get('selectedCountries');\n}\n\nfunction setCountries(countries) {\n  store.set('selectedCountries', Array.from(countries));\n  stateEmitter.emit('countriesChanged');\n}\n\nfunction clearCountries() {\n  setCountries([]);\n}\n\nfunction addCountry(countryId) {\n  const countries = new Set(getCountries());\n  countries.add(countryId);\n  setCountries(countries);\n}\n\nfunction remCountry(countryId) {\n  const countries = new Set(getCountries());\n  countries.delete(countryId);\n  setCountries(countries);\n}\n\n\n\nexport function getMigration(dataYear, country) {\n  const isEmigration = store.get('isEmigration');\n  return isEmigration ? dataYear['WORLD'][country] : dataYear[country]['Total'];\n}\n\nexport function countryName(code) {\n  const codeToName = store.get('codeToName');\n  return codeToName[code];\n}\n\nexport function filterNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    if (!isNaN(num) && num !== 0) {\n      res[key] = num;\n    }\n  }\n\n  return res;\n}\n\nexport function parseNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    res[key] = num || obj[key];\n  }\n\n  return res;\n}\n\nexport function byId(id) {\n  return document.getElementById(id);\n}\n\nexport function createSVG(id, dims = { width: 400, height: 400 }, margins) {\n  const svg = d3.select(id).append('svg')\n    .attr('width', dims.width)\n    .attr('height', dims.height);\n\n  if (margins !== undefined) {\n    const group = svg.append('g')\n      .attr('class', 'main')\n      .attr('transform', `translate(${margins.left || 0},${margins.top || 0})`);\n    return group;\n  }\n\n  return svg;\n}\n\nexport function getMigrationDiff(migrationData) {\n  function previousYear(dataYears, year) {\n    const i = dataYears.indexOf(year);\n    return (i > 0) ? dataYears[i - 1] : dataYears[0];\n  }\n\n  const migrationDiff = {};\n  const dataYears = Object.keys(migrationData);\n\n  for (const year in migrationData) {\n    if (year === dataYears[0]) continue;\n\n    migrationDiff[year] = {};\n    for (const c in migrationData[year]) {\n      migrationDiff[year][c] = {};\n\n      for (const c2 in migrationData[year][c]) {\n        const thisValue = migrationData[year][c];\n        const prevValue = migrationData[previousYear(dataYears, year)][c] || {};\n        migrationDiff[year][c][c2] = thisValue[c2] - (prevValue[c2] || 0);\n      }\n    }\n  }\n\n  return migrationDiff;\n}\n","import React from 'react';\nimport Slider from 'rc-slider';\nimport { stateEmitter, selection, years } from '../helpers';\n\nimport 'rc-slider/assets/index.css';\nimport './YearSlider.css';\n\nconst marks = {};\nyears.forEach(year => marks[year] = year + '');\n\nfunction yearChange(params) {\n  selection.setYear(params);\n}\n\nexport default class YearSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    stateEmitter.on('yearChanged', () => {\n      const year = selection.getYear();\n      this.setState({ year });\n    });\n  }\n  render() {\n    const style = { padding: '0.4em 2em 0' };\n\n    return (\n      <div style={style}>\n        <Slider\n          value={this.state.year}\n          min={1995}\n          max={2017}\n          included={false}\n          marks={marks}\n          step={null}\n          onChange={yearChange}\n          defaultValue={2010}\n          handleStyle={{ border: 'white', backgroundColor: 'silver' }} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nimport { selection, years } from '../helpers';\n\nexport default class EventSelect extends React.PureComponent {\n  render() {\n    const { events } = this.props;\n\n    const options = [];\n\n    events.forEach((event, i) => {\n      const { year, name } = event;\n      options.push({ value: i, label: `${year} ${name}` });\n    });\n\n    return (\n      <Select\n        onChange={(selected, action) => {\n          const { name, year, countries } = events[selected.value];\n          const countriesList = countries.split(',')\n\n          let i = 0;\n          while (years[i] < year) i++;\n\n          const actualYear = years[i - 1] || years[0]\n\n          console.log('EVENT:', actualYear, name, countriesList);\n          selection.setCountries(countriesList);\n          selection.setYear(actualYear);\n        }}\n        placeholder={'Select an event...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        {...this.props}\n      />);\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nimport { selection, stateEmitter } from '../helpers';\n\nconst codeToName = store.get('codeToName');\n\nfunction handleChange(selected, action) {\n  console.log(selected, action);\n\n  switch (action.action) {\n    case 'clear':\n      return selection.clearCountries();\n    case 'select-option':\n      return selection.addCountry(action.option.value)\n    case 'remove-value':\n      return selection.remCountry(action.removedValue.value)\n    default:\n      break;\n  }\n}\n\nexport default class CountrySelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    stateEmitter.on('countriesChanged', () => {\n      const countries = selection.getCountries();\n      const value = countries.map(c => ({ value: c, label: codeToName[c] }));\n      this.setState({ value });\n    });\n  }\n\n  render() {\n    console.log(this.state);\n\n    const countryData = this.props.data;\n\n    const countries = [];\n    const year = Object.keys(countryData).slice(-1);\n    Object.keys(countryData[year]).forEach(key => {\n      if (key.length !== 3) return;\n      countries.push({ value: key, label: codeToName[key] });\n    });\n\n    const options = countries.sort((a, b) => a.label < b.label ? -1 : 1);\n\n    return (\n      <Select isMulti\n        placeholder={'Select countries...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        value={this.state.value}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        onChange={handleChange}\n        {...this.props}\n      />);\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { stateEmitter, createSVG, colors, countryName } from '../helpers';\n\nexport default {\n  draw: drawChord,\n  update: updateChord,\n};\n\nlet chordSVG;\nlet countries, migrationData;\n\nlet outerRadius, innerRadius;\n\nstateEmitter.on('yearChanged', () => updateChord());\nstateEmitter.on('countriesChanged', () => updateChord());\nstateEmitter.on('migrationChanged', () => updateChord());\n\nfunction getChordMatrix() {\n  countries = store.get('selectedCountries');\n  //countries = Object.keys(migrationData[2010]['WORLD']).slice(200, 230);\n\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const matrix = [];\n\n  function getValue(c, c2) {\n    let val;\n    try {\n      val = isEmigration ? migrationData[year][c2][c] : migrationData[year][c][c2];\n    } catch (error) {\n      val = 0;\n    }\n    return val || 0;\n  }\n\n  countries.forEach(c => {\n    matrix.push(countries.map(c2 => getValue(c, c2)));\n  });\n\n  return matrix;\n}\n\nexport function drawChord(id, data) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  chordSVG = createSVG(id, { width, height });\n  outerRadius = Math.min(width, height) * 0.5;\n  innerRadius = outerRadius - 20;\n\n  migrationData = data;\n\n  chordSVG.attr('viewBox', [-width / 2, -height / 2, width, height]);\n  chordSVG.append('g').attr('class', 'nodes');\n  chordSVG.append('g').attr('class', 'arcs');\n\n  updateChord();\n}\n\nexport function updateChord() {\n  console.log('updating chord...');\n\n  const groupNodes = chordSVG.select('.nodes');\n  const groupArcs = chordSVG.select('.arcs');\n\n  groupNodes.selectAll('.node').remove();\n  groupArcs.selectAll('.arc').remove();\n\n  const myChord = d3.chord().padAngle(0.02);\n\n  const chords = myChord(getChordMatrix());\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(colors.selection.length))\n    .range(colors.selection);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  if (chords.length === 0) return;\n\n  groupNodes.selectAll('g')\n    .data(chords.groups)\n    .enter().append('g')\n    .attr('class', 'node')\n    .append('path')\n    .attr('fill', (d, i) => color(i))\n    .attr('stroke', (d, i) => color(i))\n    .attr('d', arc)\n    .on('mouseover', mouseover)\n    .on('mouseout', mouseout)\n    .append('title').text(d => `${countryName(countries[d.index])}: ${d3.format('~s')(d.value)}`);\n\n  groupArcs.selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('class', 'arc')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    // .attr('stroke', d => d3.rgb(color(d.target.index)).darker())\n    .append('title').text(d => makeTitle(d));\n\n  function makeTitle(d) {\n    const isEmigration = store.get('isEmigration');\n    const countryOrder = isEmigration ? [d.source, d.target] : [d.target, d.source];\n    const valueOrder = [d.source, d.target];\n    const [c1, c2] = countryOrder.map(el => countryName(countries[el.index]));\n    const [v1, v2] = valueOrder.map(el => d3.format('~s')(el.value));\n    return `${c1} > ${c2}: ${v1}\\n${c2} > ${c1}: ${v2}`;\n  }\n\n  function mouseover(d, i) {\n    //const t = d.value; // threshold\n    const s = groupArcs.selectAll('.arc');\n    s.classed('fade', (p) => p.source.index !== i && p.target.index !== i);\n    s.classed('show', (p) => p.source.index === i);\n  }\n\n  function mouseout(d, i) {\n    groupArcs.selectAll('.arc.show').classed('show', false);\n    groupArcs.selectAll('.arc.fade').classed('fade', false);\n  }\n\n}\n","import React from 'react';\nimport store from 'store';\nimport Switch from 'react-switch';\n\nimport { selection } from '../helpers';\n\nexport default class MigrationSwitch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { checked } = this.state;\n    store.set('isEmigration', checked);\n  }\n\n  handleChange(checked) {\n    this.setState({ checked });\n    selection.setMigration(checked);\n  }\n\n  render() {\n    const { checked } = this.state;\n\n    return (\n      <div>\n        <Switch\n          onChange={this.handleChange}\n          checked={checked}\n          onColor=\"#FFAB91\"\n          offColor=\"#FFAB91\"\n          onHandleColor=\"#FF8A65\"\n          offHandleColor=\"#FF8A65\"\n          handleDiameter={24}\n          uncheckedIcon={false}\n          checkedIcon={false}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n          height={16}\n          width={64}\n          id={'mySwitcherino'}\n        />\n        <span>{checked ? 'Emigration' : 'Immigration'}</span>\n      </div>\n    );\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport {\n  stateEmitter, createSVG, colors, countryName, parseNaN, getMigration\n} from '../helpers';\n\nexport default {\n  draw: drawGraph,\n  update: updateGraph,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet graphSVG;\nlet svgDims;\nlet selectedCountries;\nlet compareData, migrationData, populationData;\n\nconst metrics = [\n  'GDP per capita',\n  'Social support',\n  'Healthy life expectancy',\n  'Freedom to make life choices',\n  'Perceptions of corruption',\n  // 'Confidence in government',\n];\n\nstateEmitter.on('countriesChanged', () => updateGraph());\nstateEmitter.on('migrationChanged', () => updateGraph());\n\nfunction loadDataset() {\n  const dataset = {};\n  if (!selectedCountries || selectedCountries.length === 0) return [];\n\n  for (let c of selectedCountries) {\n    const country = [];\n    for (let year in migrationData) {\n      const dataYear = migrationData[year];\n      if (dataYear[c] === undefined) continue; // no data\n\n      const migrants = Number(getMigration(dataYear, c));\n      const pop = populationData[c][year] * 1000;\n      const data = migrants /*/ pop*/;\n\n      country.push({ year: Number(year), value: Number(data) });\n    }\n    dataset[c] = country;\n  }\n\n  return dataset;\n}\n\nfunction loadCompareDataset() {\n  const dataset = {};\n  compareData.forEach(entry => {\n    if (dataset[entry.country] === undefined) {\n      dataset[entry.country] = [];\n    }\n    dataset[entry.country].push(parseNaN(entry));\n  });\n  return dataset;\n}\n\nexport function drawGraph(id, data, whrData, pop) {\n  const el = document.querySelector(id);\n  svgDims = { width: el.clientWidth, height: el.clientHeight };\n\n  graphSVG = createSVG(id, svgDims, margin);\n  migrationData = data;\n  populationData = pop;\n  compareData = whrData;\n\n  updateGraph();\n}\n\nexport function updateGraph() {\n  console.log('updating graph...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  selectedCountries = store.get('selectedCountries');\n\n  const dataset = loadDataset();\n  const compareDataset = loadCompareDataset();\n\n  const flatData = Object.values(dataset).reduce((acc, d) => acc.concat(d), []);\n\n  const axisDomain = (data, fn) => [d3.min(data, fn), d3.max(data, fn)];\n\n  const yearScale = d3.scaleLinear()\n    .domain(axisDomain(flatData, d => d.year)).nice()\n    .range([0, width]);\n\n  const migrantsScale = d3.scaleLinear()\n    .domain(axisDomain(flatData, d => d.value)).nice()\n    .range([height, 0]);\n\n  // scale for each metric\n  const metricsScale = metrics.map(metric =>\n    d3.scaleLinear()\n      .domain(axisDomain(compareData, d => +d[metric])).nice()\n      .range([height, 0]));\n\n  const xAxis = d3.axisBottom(yearScale).tickFormat(d3.format('d'));\n  const yAxis1 = d3.axisLeft(migrantsScale).tickFormat(d3.format('~s'));\n  //const yAxis2 = d3.axisRight(yScale2).tickFormat(d3.format('~s'));\n\n  const line = d3.line()\n    .x(d => yearScale(d.year))\n    .y(d => migrantsScale(d.value))\n    .curve(d3.curveMonotoneX);\n\n  // CLEAR OLD ELEMENTS\n\n  graphSVG.selectAll('.country').remove();\n  graphSVG.selectAll('.xAxis').remove();\n  graphSVG.selectAll('.yAxis').remove();\n\n  // CREATE NEW ELEMENTS\n\n  graphSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  graphSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis1);\n\n  // graphSVG.append('g')\n  //   .attr('class', 'yAxis')\n  //   .attr('transform', `translate(${width},${0})`)\n  //   .call(yAxis2);\n\n  const ms = store.get('isEmigration') ? 'emigration' : 'immigration';\n\n  const countriesGroup = graphSVG.append('g')\n    .attr('class', 'countries');\n\n  function showMetrics(g) {\n    countriesGroup.attr('visibility', 'hidden');\n    g.attr('visibility', 'visible');\n    g.selectAll('.selected').classed('selected', false);\n    g.selectAll('.metrics').classed('selected', true);\n  }\n\n  function hideMetrics(g) {\n    d3.event.preventDefault();\n    countriesGroup.attr('visibility', 'visible');\n    g.attr('visibility', null);\n    g.selectAll('.selected').classed('selected', false);\n    g.selectAll('.metrics').attr('visibility', 'hidden');\n  }\n\n  let i = 0;\n  for (const country in dataset) {\n    const countryData = dataset[country];\n    const color = colors.selection[i++ % colors.selection.length];\n    const coName = countryName(country);\n\n    if (!countryData) break;\n\n    const countryGroup = countriesGroup.append('g')\n      .attr('id', country)\n      .attr('class', 'country')\n      .attr('name', coName);\n\n    countryGroup.append('path')  // line\n      .datum(countryData)\n      .attr('class', 'line')\n      .attr('stroke', color)\n      .attr('d', line)\n      .on('click', () => showMetrics(countryGroup))\n      .on('contextmenu', () => hideMetrics(countryGroup))\n      .on('mouseenter', () => countryGroup.selectAll('.metrics').attr('visibility', 'visible'))\n      .on('mouseout', () => countryGroup.selectAll('.metrics').attr('visibility', 'hidden'))\n      .append('title').text(() => `${coName} ${ms} line`);\n\n    countryGroup.append('g')    // line dots\n      .attr('class', 'dots')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .selectAll().data(countryData)\n      .enter().append('circle')\n      .attr('cx', (d) => yearScale(d.year))\n      .attr('cy', (d) => migrantsScale(d.value))\n      .attr('r', 3)\n      .append('title').text(d => `${coName} (${d.year}): ${d3.format('~s')(d.value)}`);\n\n    // correlation data\n\n    if (!compareDataset[country]) break;\n\n    const metricsGroup = countryGroup.append('g')\n      .attr('class', 'metrics')\n      .attr('visibility', 'hidden');\n\n    metrics.forEach((met, i) => {\n      const color = d3.interpolateRainbow(i / metrics.length);\n\n      const line = d3.line()\n        .x(d => yearScale(d.year))\n        .y(d => metricsScale[i](d[met]))\n        .defined(d => d[met])\n        .curve(d3.curveMonotoneX);\n\n      const metricGroup = metricsGroup.append('g')\n        .attr('class', 'metric');\n\n      metricGroup.append('path')  // line\n        .datum(compareDataset[country])\n        .attr('stroke', color)\n        .attr('fill', 'none')\n        .attr('opacity', 0.8)\n        .attr('d', line)\n        .append('title').text(() => met);\n\n      metricGroup.append('g')    // correlation circles\n        .attr('fill', color)\n        .attr('stroke', color)\n        .selectAll('circle')\n        .data(compareDataset[country])\n        .enter().append('circle')\n        .attr('class', 'circle')\n        .attr('cx', d => yearScale(d.year))\n        .attr('cy', d => metricsScale[i](d[met]))\n        .attr('r', d => d[met] === '' ? 0 : 3)\n        .append('title').text(d => `${coName} (${d.year}): ${d[met]} ${met}`);\n    });\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport {\n  selection, stateEmitter, createSVG, colors, countryName, getMigration\n} from '../helpers';\n\nexport default {\n  draw: drawMap,\n  update: updateMap,\n};\n\nlet mapSVG;\nlet migrationData, populationData;\n\nstateEmitter.on('yearChanged', () => updateMap());\nstateEmitter.on('countriesChanged', () => updateMap());\nstateEmitter.on('migrationChanged', () => updateMap());\n\nfunction mouseIn() { }\n\nfunction mouseOut() { }\n\nfunction clickRight(d) {\n  d3.event.preventDefault();\n\n  selection.remCountry(d.id);\n}\n\nfunction clickLeft(d) {\n  const forbidden = ['UNK', 'TWN', 'ATA'];\n  if (forbidden.includes(d.id)) return;\n\n  selection.addCountry(d.id);\n}\n\n\n\nexport function drawMap(id, topology, data, population) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  mapSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n  populationData = population;\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 5)\n    .translate([width / 2, height / 0.8]);\n\n  const path = d3.geoPath().projection(projection);\n  const zoom = d3.zoom()\n    .scaleExtent([0.6, 7])\n    .on('zoom', zoomed);\n\n  mapSVG.call(zoom);\n\n  const map = mapSVG.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(topology.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .on('click', clickLeft)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', clickRight)\n    .append('title').text(d => `${d.id}: ${d.properties.name}`);\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n  updateMap();\n}\n\nexport function updateMap() {\n  console.log('updating map...');\n\n  const selectedCountries = store.get('selectedCountries') || [];\n  const year = store.get('year') || 2010;\n  const dataYear = migrationData[year];\n\n  function getMigrants(d) {\n    if (dataYear[d.id] === undefined) return 0; // no data\n    const migrants = getMigration(dataYear, d.id);\n    const pop = populationData[d.id][year];\n\n    return migrants / pop || 0;\n  }\n\n  const color = d3.scaleThreshold()\n    .domain([-20, -10, -5, -2.5, 0, 2.5, 5, 10, 20])\n    .range(colors.map);\n\n  mapSVG.selectAll('path')\n    // .transition().duration(600)\n    .style('fill', (d) => color(getMigrants(d)))\n    .select('title').text(d =>\n      `${countryName(d.id)}: ${d3.format('.1f')(getMigrants(d))}/1000 population`\n    );\n\n  d3.selectAll('.selected').classed('selected', false);\n  selectedCountries.forEach((countryID, i) => {\n    d3.select('path#' + countryID)\n      .style('fill', colors.selection[i % colors.selection.length])\n      .classed('selected', true);\n  });\n}\n","import store from 'store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { tsv, json } from 'd3-fetch';\n\nimport YearSlider from './components/YearSlider';\nimport EventSelect from './components/EventSelect';\nimport CountrySelect from './components/CountrySelect';\nimport MigrationSwitch from './components/MigrationSwitch';\nimport { chord, graph, map } from './idioms';\nimport { selection, byId, filterNaN, getMigrationDiff } from './helpers';\n\nimport './index.css';\n\n// STARTUP\n\nstore.remove('selectedCountries');\nstore.remove('isEmigration');\nstore.set('year', 2010);\nstore.set('selectedCountries', ['PRT']);\n\n// DYNAMIC REAL DATA\n\nconst filesPromise = [\n  json('./data/topology.json'),\n  json('./data/migrations.json'),\n  tsv('./data/conversion.tsv'),\n  tsv('./data/population.tsv'),\n  tsv('./data/events.tsv'),\n  tsv('./data/whr2018.tsv'),\n];\n\nPromise.all(filesPromise).then((dataResults) => handleData(dataResults));\n\nfunction handleData(data) {\n  const [topology, migrationData, conversion, population, events, whrData] = data;\n  const migrationDiff = getMigrationDiff(migrationData);\n\n  const codeToName = {}, countryPop = {}, countryWHR = {};\n  population.forEach((c) => countryPop[c.Country] = filterNaN(c));\n  whrData.forEach((c) => countryWHR[c.country] = filterNaN(c));\n  conversion.forEach(c => codeToName[c.code3] = c.name);\n  store.set('codeToName', codeToName);\n\n  map.draw('#map', topology, migrationDiff, countryPop);\n  graph.draw('#graph', migrationDiff, whrData, countryPop);\n  chord.draw('#chord', migrationData);\n\n  ReactDOM.render(<CountrySelect data={migrationData} />, byId('countrySelect'));\n  ReactDOM.render(<EventSelect events={events} />, byId('eventList'));\n  ReactDOM.render(<MigrationSwitch />, byId('migrationSwitch'));\n  ReactDOM.render(<YearSlider />, byId('yearSlider'));\n\n  selection.setCountries(['PRT', 'FRA', 'GBR']);\n}\n"],"sourceRoot":""}