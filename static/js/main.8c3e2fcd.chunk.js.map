{"version":3,"sources":["index.js"],"names":["width","height","color","d3","domain","range","svg","append","attr","projection","scale","translate","path","Promise","all","json","tsv","then","dataResults","_dataResults","Object","_home_zettca_git_migrations_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","data","population","populationById","forEach","d","id","selectAll","features","enter","style","datum","mesh","a","b","handleData"],"mappings":"yKAmBEA,EAAQ,IADyC,GAAtB,GAE3BC,EAAS,IAFO,GAAuB,GAInCC,EAAQC,MACXC,OAAO,CAAC,IAAQ,IAAS,IAAS,IAAO,IAAO,IAAQ,IAAQ,IAAS,IAAS,OAClFC,MAAM,CAAC,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,kBAAmB,gBAAiB,gBAAiB,iBAEhLC,EAAMH,IAAa,eACtBI,OAAO,OACPC,KAAK,QAASR,GACdQ,KAAK,SAAUP,GACfM,OAAO,KACPC,KAAK,QAAS,OAEXC,EAAaN,MAChBO,MAAM,KACNC,UAAU,CAACX,EAAQ,EAAGC,EAAS,MAE5BW,EAAOT,MAAaM,WAAWA,GAErCI,QAAQC,IAAI,CACVC,YAAK,yBACLC,YAAI,2BACHC,KAAK,SAACC,GAAgB,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CACSF,EADT,IAMzB,SAAoBI,EAAMC,GACxB,IAAMC,EAAiB,GAEvBD,EAAWE,QAAQ,SAAUC,GAAKF,EAAeE,EAAEC,KAAOD,EAAEH,aAE5DjB,EAAIC,OAAO,KACRC,KAAK,QAAS,aACdoB,UAAU,QACVN,KAAKA,EAAKO,UACVC,QAAQvB,OAAO,QACfC,KAAK,IAAKI,GACVmB,MAAM,OAAQ,SAACL,GAAD,OAAOxB,EAAMsB,EAAeE,EAAEC,OAC5CI,MAAM,SAAU,SAChBA,MAAM,eAAgB,KACtBA,MAAM,UAAW,IAEjBA,MAAM,SAAU,SAChBA,MAAM,eAAgB,IAEzBzB,EAAIC,OAAO,QACRyB,MAAMC,YAAKX,EAAKO,SAAU,SAACK,EAAGC,GAAJ,OAAUD,EAAEP,KAAOQ,EAAER,MAE/CnB,KAAK,QAAS,SACdA,KAAK,IAAKI,GA3BbwB,CAFuBjB,EAAA,GAAAA,EAAA","file":"static/js/main.8c3e2fcd.chunk.js","sourcesContent":["/*\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n*/\n\nimport './index.css';\n\nimport * as d3 from 'd3';\nimport { mesh } from 'topojson';\nimport { tsv, json } from 'd3-fetch';\n\nconst K = 1000, M = 1000000;\n\nconst\n  margin = { top: 20, right: 20, bottom: 30, left: 30 },\n  width = 600 - margin.left - margin.right,\n  height = 400 - margin.top - margin.bottom;\n\nconst color = d3.scaleThreshold()\n  .domain([10 * K, 100 * K, 500 * K, 1 * M, 5 * M, 10 * M, 50 * M, 100 * M, 500 * M, 1500 * M])\n  .range(['rgb(247,251,255)', 'rgb(222,235,247)', 'rgb(198,219,239)', 'rgb(158,202,225)', 'rgb(107,174,214)', 'rgb(66,146,198)', 'rgb(33,113,181)', 'rgb(8,81,156)', 'rgb(8,48,107)', 'rgb(3,19,43)']);\n\nconst svg = d3.selectAll('#choropleth')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height)\n  .append('g')\n  .attr('class', 'map');\n\nconst projection = d3.geoMercator()\n  .scale(130)\n  .translate([width / 2, height / 1.5]);\n\nconst path = d3.geoPath().projection(projection);\n\nPromise.all([\n  json('./data/countries.json'),\n  tsv('./data/population.tsv')\n]).then((dataResults) => {\n  const [countries, population] = dataResults;\n  handleData(countries, population);\n});\n\n\nfunction handleData(data, population) {\n  const populationById = {};\n\n  population.forEach(function (d) { populationById[d.id] = +d.population; });\n\n  svg.append('g')\n    .attr('class', 'countries')\n    .selectAll('path')\n    .data(data.features)\n    .enter().append('path')\n    .attr('d', path)\n    .style('fill', (d) => color(populationById[d.id]))\n    .style('stroke', 'white')\n    .style('stroke-width', 1.5)\n    .style('opacity', 0.8)\n    // tooltips\n    .style('stroke', 'white')\n    .style('stroke-width', 0.3);\n\n  svg.append('path')\n    .datum(mesh(data.features, (a, b) => a.id !== b.id))\n    //.datum(mesh(data.features, a, b) => a !== b))\n    .attr('class', 'names')\n    .attr('d', path);\n}\n"],"sourceRoot":""}