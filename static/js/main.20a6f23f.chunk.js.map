{"version":3,"sources":["helpers.js","idioms/chord.js","idioms/plot.js","idioms/lines.js","idioms/map.js","components/YearSlider.js","components/CountrySelect.js","components/MigrationSwitch.js","index.js"],"names":["numColors","colors","map","d3","selection","countryName","code","store","get","filterNaN","obj","res","key","num","Number","isNaN","createSVG","id","dims","arguments","length","undefined","width","height","margins","svg","append","attr","concat","left","top","chordSVG","selectedCountries","migrationData","outerRadius","innerRadius","chord","draw","data","Math","min","updateChord","update","getChordMatrix","Object","keys","slice","isEmigration","year","matrix","forEach","c","push","c2","val","error","getValue","console","log","groupNodes","select","groupArcs","selectAll","remove","chords","padAngle","myChord","ribbon","radius","color","domain","range","arc","groups","enter","d","i","on","value","s","classed","p","source","index","target","text","countryOrder","valueOrder","_countryOrder$map","el","_countryOrder$map2","slicedToArray","c1","_valueOrder$map","_valueOrder$map2","v1","v2","makeTitle","plotSVG","svgDims","compareData","plot","margin","updatePlot","right","bottom","flatData","reduce","acc","getDomain","dataset","fn","xScale","x","nice","yScale","y","xAxis","tickFormat","yAxis","call","linesSVG","populationData","lines","pop","updateLines","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","country","dataYear","migrants","err","return","loadDataset","yDomain","line","curve","_loop","name","datum","mapSVG","idioms_map","topology","population","projection","scale","translate","path","zoom","scaleExtent","transform","features","properties","clicked","mouseIn","mouseOut","contextMenu","updateMap","preventDefault","Set","delete","set","Array","from","includes","add","getMigrants","n","style","countryID","marks","1995","2000","2005","2010","2015","2017","yearChange","params","YearSlider","react_default","a","createElement","padding","es","max","included","step","onChange","defaultValue","handleStyle","border","backgroundColor","React","PureComponent","CountrySelect","options","this","props","countries","sort","b","label","react_select_esm","assign","isMulti","placeholder","components","makeAnimated","onBlurResetsInput","onSelectResetsInput","onCloseResetsInput","theme","objectSpread","borderRadius","neutral0","neutral5","neutral10","neutral20","primary25","neutral50","neutral80","MigrationSwitch","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","checked","handleChange","bind","assertThisInitialized","setState","react_switch_default","onColor","offColor","onHandleColor","offHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","Component","plotData","filesPromise","json","tsv","Promise","all","then","dataResults","_data","conversion","whrData","migrationDiff","previousYear","dataYears","indexOf","thisValue","prevValue","getMigrationDiff","codeToName","countryPop","countryWHR","Country","code3","ReactDOM","render","CountrySelect_CountrySelect","makeSelect","document","getElementById","MigrationSwitch_MigrationSwitch","YearSlider_YearSlider","handleData"],"mappings":"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","file":"static/js/main.20a6f23f.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport store from 'store';\n\nexport function tryNumber(value) {\n  return Number(value) || value;\n}\n\nexport const numColors = 9;\n\nexport const colors = {\n  map: d3.schemeBlues[numColors],\n  selection: d3.schemeReds[numColors]\n};\n\nexport function countryName(code) {\n  const codeToName = store.get('codeToName');\n  return codeToName[code];\n}\n\nexport function filterNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n\n    if (!isNaN(num) && num !== 0) {\n      res[key] = Number(obj[key]);\n    }\n  }\n\n  return res;\n}\n\nexport function createSVG(id, dims = { width: 400, height: 400 }, margins) {\n  const svg = d3.select(id).append('svg')\n    .attr('width', dims.width)\n    .attr('height', dims.height);\n\n  if (margins !== undefined) {\n    const group = svg.append('g')\n      .attr('class', 'main')\n      .attr('transform', `translate(${margins.left || 0},${margins.top || 0})`);\n    return group;\n  }\n\n  return svg;\n}\n\nexport function getMigrationDiff(migrationData) {\n  function previousYear(dataYears, year) {\n    const i = dataYears.indexOf(year);\n    return (i > 0) ? dataYears[i - 1] : dataYears[0];\n  }\n\n  const migrationDiff = {};\n  const dataYears = Object.keys(migrationData);\n\n  for (const year in migrationData) {\n    if (year === dataYears[0]) continue;\n\n    migrationDiff[year] = {};\n    for (const c in migrationData[year]) {\n      migrationDiff[year][c] = {};\n\n      for (const c2 in migrationData[year][c]) {\n        const thisValue = migrationData[year][c];\n        const prevValue = migrationData[previousYear(dataYears, year)][c] || {};\n        migrationDiff[year][c][c2] = thisValue[c2] - (prevValue[c2] || 0);\n      }\n    }\n  }\n\n  return migrationDiff;\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, countryName } from '../helpers';\n\nexport default {\n  draw: drawChord,\n  update: updateChord,\n};\n\nlet chordSVG;\nlet selectedCountries;\nlet migrationData;\n\nlet outerRadius, innerRadius;\n\nfunction getChordMatrix() {\n  selectedCountries = /*store.get('selectedCountries') ||*/ Object.keys(migrationData[2010]['WORLD']).slice(1, 40);\n\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const matrix = [];\n\n  function getValue(c, c2) {\n    let val;\n    try {\n      val = isEmigration ? migrationData[year][c2][c] : migrationData[year][c][c2];\n    } catch (error) {\n      val = 0;\n    }\n    return val || 0;\n  }\n\n  selectedCountries.forEach(c => {\n    matrix.push(selectedCountries.map(c2 => getValue(c, c2)));\n  });\n\n  return matrix;\n}\n\nexport function drawChord(id, width, height, data) {\n  chordSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n\n  outerRadius = Math.min(width, height) * 0.5;\n  innerRadius = outerRadius - 20;\n\n  chordSVG.attr('viewBox', [-width / 2, -height / 2, width, height]);\n\n  chordSVG.append('g').attr('class', 'nodes');\n  chordSVG.append('g').attr('class', 'arcs');\n\n  updateChord();\n}\n\nexport function updateChord() {\n  console.log('updating chord...');\n\n  const groupNodes = chordSVG.select('.nodes');\n  const groupArcs = chordSVG.select('.arcs');\n\n  groupNodes.selectAll('.node').remove();\n  groupArcs.selectAll('.arc').remove();\n\n  const myChord = d3.chord().padAngle(0.02);\n\n  const chords = myChord(getChordMatrix());\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(9))\n    .range(colors.selection);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  groupNodes.selectAll('g')\n    .data(chords.groups)\n    .enter().append('g')\n    .attr('class', 'node')\n    .append('path')\n    .attr('fill', (d, i) => color(i))\n    .attr('stroke', (d, i) => color(i))\n    .attr('d', arc)\n    .on('mouseover', mouseover)\n    .on('mouseout', mouseout)\n    .append('title').text(d => `${countryName(selectedCountries[d.index])}: ${d3.format('~s')(d.value)}`);\n\n  groupArcs.selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('class', 'arc')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    // .attr('stroke', d => d3.rgb(color(d.target.index)).darker())\n    // .on('mouseover', log)\n    // .on('mouseout', log)\n    .append('title').text(d => makeTitle(d));\n\n  function makeTitle(d) {\n    const isEmigration = store.get('isEmigration');\n    const countryOrder = isEmigration ? [d.source, d.target] : [d.target, d.source];\n    const valueOrder = [d.source, d.target];\n    const [c1, c2] = countryOrder.map(el => countryName(selectedCountries[el.index]));\n    const [v1, v2] = valueOrder.map(el => d3.format('~s')(el.value));\n    return `${c1} > ${c2}: ${v1}\\n${c2} > ${c1}: ${v2}`;\n  }\n\n  function log(d, i) {\n    console.log(d.source);\n  }\n\n  function mouseover(d, i) {\n    console.log(d);\n\n    const t = d.value; // threshold\n\n    const s = groupArcs.selectAll('.arc');\n    s.classed('fade', (p) => p.source.index !== i && p.target.index !== i);\n    s.classed('show', (p) => p.source.index === i);\n  }\n\n  function mouseout(d, i) {\n    groupArcs.selectAll('.arc.show').classed('show', false);\n    groupArcs.selectAll('.arc.fade').classed('fade', false);\n  }\n\n}\n","import * as d3 from 'd3';\nimport { createSVG } from '../helpers';\n\nexport default {\n  draw: drawPlot,\n  update: updatePlot,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet plotSVG;\nlet svgDims;\nlet compareData;\n\nexport function drawPlot(id, width, height, data) {\n  svgDims = { width, height };\n  plotSVG = createSVG(id, { width, height }, margin);\n\n  compareData = data;\n\n  updatePlot();\n}\n\nexport function updatePlot() {\n  console.log('updating plot...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  const flatData = compareData.reduce((acc, d) => acc.concat(d), []);\n  const getDomain = (dataset, fn) => [d3.min(dataset, fn), d3.max(dataset, fn)];\n\n  const xScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.x)).nice()\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.y)).nice()\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.format('d'));\n  const yAxis = d3.axisLeft(yScale)\n    .tickFormat(d3.format('~s'));\n\n  // CLEAR OLD ELEMENTS\n\n  plotSVG.selectAll('.circle').remove();\n\n  // CREATE NEW ELEMENTS\n\n  plotSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  plotSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis);\n\n  plotSVG.append('g')\n    .attr('class', 'circles')\n    .selectAll('circle')\n    .data(compareData)\n    .enter().append('circle')\n    .attr('class', 'circle')\n    .attr('cx', d => d.x)\n    .attr('cy', d => d.y)\n    .attr('r', 4);\n\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName } from '../helpers';\n\nexport default {\n  draw: drawLines,\n  update: updateLines,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet linesSVG;\nlet svgDims;\nlet migrationData;\nlet populationData;\nlet selectedCountries;\n\nfunction loadDataset() {\n  const dataset = [];\n  selectedCountries = store.get('selectedCountries');\n  if (!selectedCountries || selectedCountries.length === 0) return [];\n\n  const isEmigration = store.get('isEmigration');\n\n  for (let c of selectedCountries) {\n    const country = [];\n    for (let year in migrationData) {\n      const dataYear = migrationData[year];\n      if (dataYear[c] === undefined) continue; // no data\n\n      const migrants = Number(isEmigration ? dataYear['WORLD'][c] : dataYear[c]['Total']);\n      const pop = populationData[c][year] * 1000;\n      const data = migrants /*/ pop*/;\n\n      country.push({ year: Number(year), value: Number(data) });\n    }\n    dataset.push(country);\n  }\n\n  return dataset;\n}\n\nexport function drawLines(id, width, height, data, pop) {\n  svgDims = { width, height };\n  linesSVG = createSVG(id, { width, height }, margin);\n  migrationData = data;\n  populationData = pop;\n\n  updateLines();\n}\n\nexport function updateLines() {\n  console.log('updating lines...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  const dataset = loadDataset();\n\n  const flatData = dataset.reduce((acc, d) => acc.concat(d), []);\n  const xDomain = (data, fn) => [d3.min(data, fn), d3.max(data, fn)];\n  const yDomain = (data, fn) => [Math.min(0, d3.min(data, fn)), d3.max(data, fn)];\n\n  const xScale = d3.scaleLinear()\n    .domain(xDomain(flatData, d => d.year)).nice()\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()\n    .domain(yDomain(flatData, d => d.value)).nice()\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.format('d'));\n  const yAxis = d3.axisLeft(yScale)\n    .tickFormat(d3.format('~s'));\n\n  const line = d3.line()\n    .x(d => xScale(d.year))\n    .y(d => yScale(d.value))\n    .curve(d3.curveMonotoneX);\n\n  // CLEAR OLD ELEMENTS\n\n  linesSVG.selectAll('.dots').remove();\n  linesSVG.selectAll('.line').remove();\n  linesSVG.select('.xAxis').remove();\n  linesSVG.select('.yAxis').remove();\n\n  // CREATE NEW ELEMENTS\n\n  linesSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  linesSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis);\n\n  for (let i = 0; i < dataset.length; i++) {\n    const color = colors.selection[i % numColors];\n    const name = countryName(selectedCountries[i]);\n\n    linesSVG.append('path')\n      .datum(dataset[i])\n      .attr('stroke', color)\n      .attr('class', 'line')\n      .attr('d', line);\n\n    linesSVG.append('g')\n      .attr('class', 'dots')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .selectAll().data(dataset[i])\n      .enter().append('circle')\n      .attr('cx', (d) => xScale(d.year))\n      .attr('cy', (d) => yScale(d.value))\n      .attr('r', 5)\n      .append('title').text(d => `${name} (${d.year}): ${d3.format('~s')(d.value)}`);\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName } from '../helpers';\nimport { lines, chord } from '../idioms';\n\nexport default {\n  draw: drawMap,\n  update: updateMap,\n};\n\nlet mapSVG;\nlet migrationData, populationData;\n\nfunction mouseIn() { }\n\nfunction mouseOut() { }\n\nfunction contextMenu(d) {\n  d3.event.preventDefault();\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.delete(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nfunction clicked(d) {\n  const forbidden = ['UNK', 'TWN', 'ATA'];\n  if (forbidden.includes(d.id)) return;\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.add(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nexport function drawMap(id, width, height, topology, data, population) {\n  mapSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n  populationData = population;\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 4)\n    .translate([width / 2, height / 1.2]);\n\n  const path = d3.geoPath().projection(projection);\n  const zoom = d3.zoom()\n    .scaleExtent([0.6, 7])\n    .on('zoom', zoomed);\n\n  mapSVG.call(zoom);\n\n  const map = mapSVG.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(topology.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .on('click', clicked)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', contextMenu)\n    .append('title').text(d => `${d.id}: ${d.properties.name}`);\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n  updateMap();\n}\n\nexport function updateMap() {\n  console.log('updating map...');\n\n  const selectedCountries = store.get('selectedCountries') || [];\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const dataYear = migrationData[year];\n\n  function getMigrants(d) {\n    if (dataYear[d.id] === undefined) return 0; // no data\n    const migrants = isEmigration ? dataYear['WORLD'][d.id] : dataYear[d.id]['Total'];\n    const pop = populationData[d.id][year] * 1000;\n    return migrants || 0;\n  }\n\n  const color = d3.scaleThreshold()\n    .domain([-10, -5, -2, -1, 0, 1, 2, 5, 10].map(n => n * 100 * 1000))\n    .range(colors.map);\n\n  mapSVG.selectAll('path')\n    // .transition().duration(600)\n    .style('fill', (d) => color(getMigrants(d)))\n    .select('title').text(d => `${countryName(d.id)}: ${d3.format('~s')(getMigrants(d))}`);\n\n  d3.selectAll('.selected').classed('selected', false);\n  selectedCountries.forEach((countryID, i) => {\n    d3.select('path#' + countryID)\n      .style('fill', colors.selection[i % numColors])\n      .classed('selected', true);\n  });\n\n  lines.update();\n  chord.update();\n}\n","import React from 'react';\nimport store from 'store';\nimport Slider from 'rc-slider';\nimport { map } from '../idioms';\n\nimport 'rc-slider/assets/index.css';\nimport './YearSlider.css';\n\nconst marks = {\n  1995: '1995',\n  2000: '2000',\n  2005: '2005',\n  2010: '2010',\n  2015: '2015',\n  2017: '2017',\n};\n\nfunction yearChange(params) {\n  store.set('year', params);\n  map.update();\n}\n\nexport default class YearSlider extends React.PureComponent {\n  render() {\n    const style = { padding: '0.4em 2em 0' };\n\n    return (\n      <div style={style}>\n        <Slider\n          min={1995}\n          max={2017}\n          included={false}\n          marks={marks}\n          step={null}\n          onChange={yearChange}\n          defaultValue={2010}\n          handleStyle={{ border: 'white', backgroundColor: 'silver' }} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nexport default class CountrySelect extends React.PureComponent {\n  render() {\n    const { countries } = this.props;\n    const options = countries.sort((a, b) => a.label < b.label ? -1 : 1);\n\n    return (\n      <Select isMulti\n        placeholder={'Select countries...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        {...this.props}\n      />);\n  }\n}\n","import React from 'react';\nimport store from 'store';\nimport Switch from 'react-switch';\n\nimport { map } from '../idioms';\n\nexport default class MigrationSwitch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { checked } = this.state;\n    store.set('isEmigration', checked);\n  }\n\n  handleChange(checked) {\n    store.set('isEmigration', checked);\n    this.setState({ checked });\n\n    map.update(); // map updates others\n  }\n\n  render() {\n    const { checked } = this.state;\n\n    return (\n      <div>\n        <Switch\n          onChange={this.handleChange}\n          checked={checked}\n          onColor=\"#FFCC80\"\n          offColor=\"#FFAB91\"\n          onHandleColor=\"#FFB74D\"\n          offHandleColor=\"#FF8A65\"\n          handleDiameter={24}\n          uncheckedIcon={false}\n          checkedIcon={false}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n          height={16}\n          width={64}\n          id={'mySwitcherino'}\n        />\n        <span>{checked ? 'Emigration' : 'Immigration'}</span>\n      </div>\n    );\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { tsv, json } from 'd3-fetch';\n\nimport YearSlider from './components/YearSlider';\n//import EventSelect from './components/EventSelect';\nimport CountrySelect from './components/CountrySelect';\nimport MigrationSwitch from './components/MigrationSwitch';\nimport { chord, plot, lines, map } from './idioms';\nimport { filterNaN, getMigrationDiff } from './helpers';\n\nimport './index.css';\nimport './idioms.css';\n\n// STARTUP\n\nstore.remove('selectedCountries');\nstore.remove('isEmigration');\n\nstore.set('selectedCountries', ['PRT', 'ESP', 'FRA', 'DEU']);\n\n// STATIC TEST DATA\n\nconst plotData = [\n  { x: 21, y: 110 },\n  { x: 22.8, y: 93 },\n  { x: 18.7, y: 175 },\n  { x: 14.3, y: 245 },\n  { x: 24.4, y: 62 },\n  { x: 14.7, y: 230 },\n  { x: 32.4, y: 66 },\n  { x: 30.4, y: 52 },\n  { x: 33.9, y: 65 },\n  { x: 15.5, y: 150 },\n  { x: 15.2, y: 150 },\n  { x: 13.3, y: 245 },\n  { x: 19.2, y: 175 },\n  { x: 27.3, y: 66 },\n  { x: 26, y: 91 },\n  { x: 30.4, y: 113 },\n  { x: 15.8, y: 264 },\n  { x: 19.7, y: 175 },\n  { x: 15, y: 335 },\n  { x: 21.4, y: 109 }\n];\n\n// DYNAMIC REAL DATA\n\nconst filesPromise = [\n  json('./data/topology.json'),\n  json('./data/migrations.json'),\n  tsv('./data/conversion.tsv'),\n  tsv('./data/population.tsv'),\n  tsv('./data/whr2017.tsv'),\n];\n\nPromise.all(filesPromise).then((dataResults) => handleData(dataResults));\n\nfunction handleData(data) {\n  const [topology, migrationData, conversion, population, whrData] = data;\n\n  console.log(migrationData);\n  const migrationDiff = getMigrationDiff(migrationData);\n\n  console.log(migrationDiff);\n\n  const codeToName = {};\n  const countryPop = {};\n  const countryWHR = {};\n  population.forEach((c) => countryPop[c.Country] = filterNaN(c));\n  whrData.forEach((c) => countryWHR[c.country] = filterNaN(c));\n  conversion.forEach(c => codeToName[c.code3] = c.name);\n  store.set('codeToName', codeToName);\n\n  // order is important, sadly\n  chord.draw('#chord', 600, 420, migrationData);\n  plot.draw('#plot', 600, 420, plotData);\n  lines.draw('#lines', 1000, 420, migrationDiff, countryPop);\n  map.draw('#map', 1000, 420, topology, migrationDiff, countryPop);\n\n  ReactDOM.render(makeSelect(migrationDiff, codeToName), document.getElementById('countrySelect'));\n  // ReactDOM.render(<EventSelect />, document.getElementById('eventList'));\n  ReactDOM.render(<MigrationSwitch />, document.getElementById('migrationSwitch'));\n  ReactDOM.render(<YearSlider />, document.getElementById('yearSlider'));\n}\n\nfunction makeSelect(migrationData, codeToName) {\n  function countryChange(selection) {\n    const countries = new Set(store.get('selectedCountries'));\n    selection.forEach(el => countries.add(el.value));\n    store.set('selectedCountries', Array.from(countries));\n    map.update();\n  }\n\n  const countries = [];\n  Object.keys(migrationData[2000]).forEach(key => {\n    if (key.length !== 3) return;\n    countries.push({ value: key, label: codeToName[key] });\n  });\n\n  return (<CountrySelect countries={countries} onChange={countryChange} />\n  );\n}\n"],"sourceRoot":""}