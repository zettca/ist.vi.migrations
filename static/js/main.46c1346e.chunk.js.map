{"version":3,"sources":["helpers.js","idioms/chord.js","idioms/graph.js","idioms/map.js","components/YearSlider.js","components/CountrySelect.js","components/MigrationSwitch.js","index.js"],"names":["numColors","colors","map","d3","selection","getMigration","dataYear","country","store","get","countryName","code","filterNaN","obj","res","key","num","Number","isNaN","byId","id","document","getElementById","createSVG","dims","arguments","length","undefined","width","height","margins","svg","append","attr","concat","left","top","chordSVG","countries","migrationData","outerRadius","innerRadius","chord","draw","data","el","querySelector","_ref","clientWidth","clientHeight","Math","min","updateChord","update","getChordMatrix","isEmigration","year","matrix","forEach","c","push","c2","val","error","getValue","console","log","groupNodes","select","groupArcs","selectAll","remove","chords","padAngle","myChord","ribbon","radius","color","domain","range","arc","groups","enter","d","i","on","s","classed","p","source","index","target","text","value","countryOrder","valueOrder","_countryOrder$map","_countryOrder$map2","Object","slicedToArray","c1","_valueOrder$map","_valueOrder$map2","v1","v2","makeTitle","graphSVG","svgDims","selectedCountries","compareData","populationData","graph","whrData","pop","margin","updateGraph","right","bottom","metrics","loadCompareDataset","dataset","entry","parseNaN","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","migrants","err","return","loadDataset","compareDataset","flatData","values","reduce","acc","axisDomain","fn","yearScale","nice","migrantsScale","metricsScale","metric","xAxis","tickFormat","yAxis1","line","x","y","curve","call","ms","countriesGroup","_loop","countryData","coName","countryGroup","datum","g","preventDefault","metricsGroup","met","metricGroup","mapSVG","idioms_map","topology","population","projection","scale","translate","path","zoom","scaleExtent","transform","features","properties","name","clickLeft","mouseIn","mouseOut","clickRight","updateMap","Set","delete","set","Array","from","includes","add","getMigrants","style","countryID","marks","1995","2000","2005","2010","2015","2017","yearChange","params","YearSlider","react_default","a","createElement","padding","es","max","included","step","onChange","defaultValue","handleStyle","border","backgroundColor","React","PureComponent","CountrySelect","options","this","props","sort","b","label","react_select_esm","assign","isMulti","placeholder","components","makeAnimated","onBlurResetsInput","onSelectResetsInput","onCloseResetsInput","theme","objectSpread","borderRadius","neutral0","neutral5","neutral10","neutral20","primary25","neutral50","neutral80","MigrationSwitch","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","checked","handleChange","bind","assertThisInitialized","setState","react_switch_default","onColor","offColor","onHandleColor","offHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","Component","filesPromise","json","tsv","Promise","all","then","dataResults","_data","conversion","migrationDiff","previousYear","dataYears","indexOf","keys","thisValue","prevValue","getMigrationDiff","codeToName","countryPop","countryWHR","Country","code3","ReactDOM","render","CountrySelect_CountrySelect","makeSelect","MigrationSwitch_MigrationSwitch","YearSlider_YearSlider","handleData"],"mappings":"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","file":"static/js/main.46c1346e.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport store from 'store';\n\nexport function tryNumber(value) {\n  return Number(value) || value;\n}\n\nexport const numColors = 9;\n\nexport const colors = {\n  map: d3.schemeBlues[numColors],\n  selection: d3.schemeRdYlGn[numColors],\n};\n\nexport function getMigration(dataYear, country) {\n  const isEmigration = store.get('isEmigration');\n  return isEmigration ? dataYear['WORLD'][country] : dataYear[country]['Total'];\n}\n\nexport function countryName(code) {\n  const codeToName = store.get('codeToName');\n  return codeToName[code];\n}\n\nexport function filterNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    if (!isNaN(num) && num !== 0) {\n      res[key] = num;\n    }\n  }\n\n  return res;\n}\n\nexport function parseNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    res[key] = num || obj[key];\n  }\n\n  return res;\n}\n\nexport function byId(id) {\n  return document.getElementById(id);\n}\n\nexport function createSVG(id, dims = { width: 400, height: 400 }, margins) {\n  const svg = d3.select(id).append('svg')\n    .attr('width', dims.width)\n    .attr('height', dims.height);\n\n  if (margins !== undefined) {\n    const group = svg.append('g')\n      .attr('class', 'main')\n      .attr('transform', `translate(${margins.left || 0},${margins.top || 0})`);\n    return group;\n  }\n\n  return svg;\n}\n\nexport function getMigrationDiff(migrationData) {\n  function previousYear(dataYears, year) {\n    const i = dataYears.indexOf(year);\n    return (i > 0) ? dataYears[i - 1] : dataYears[0];\n  }\n\n  const migrationDiff = {};\n  const dataYears = Object.keys(migrationData);\n\n  for (const year in migrationData) {\n    if (year === dataYears[0]) continue;\n\n    migrationDiff[year] = {};\n    for (const c in migrationData[year]) {\n      migrationDiff[year][c] = {};\n\n      for (const c2 in migrationData[year][c]) {\n        const thisValue = migrationData[year][c];\n        const prevValue = migrationData[previousYear(dataYears, year)][c] || {};\n        migrationDiff[year][c][c2] = thisValue[c2] - (prevValue[c2] || 0);\n      }\n    }\n  }\n\n  return migrationDiff;\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, countryName } from '../helpers';\n\nexport default {\n  draw: drawChord,\n  update: updateChord,\n};\n\nlet chordSVG;\nlet countries, migrationData;\n\nlet outerRadius, innerRadius;\n\nfunction getChordMatrix() {\n  countries = store.get('selectedCountries');\n  //countries = Object.keys(migrationData[2010]['WORLD']).slice(200, 230);\n\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const matrix = [];\n\n  function getValue(c, c2) {\n    let val;\n    try {\n      val = isEmigration ? migrationData[year][c2][c] : migrationData[year][c][c2];\n    } catch (error) {\n      val = 0;\n    }\n    return val || 0;\n  }\n\n  countries.forEach(c => {\n    matrix.push(countries.map(c2 => getValue(c, c2)));\n  });\n\n  return matrix;\n}\n\nexport function drawChord(id, data) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  chordSVG = createSVG(id, { width, height });\n  outerRadius = Math.min(width, height) * 0.5;\n  innerRadius = outerRadius - 20;\n\n  migrationData = data;\n\n  chordSVG.attr('viewBox', [-width / 2, -height / 2, width, height]);\n  chordSVG.append('g').attr('class', 'nodes');\n  chordSVG.append('g').attr('class', 'arcs');\n\n  updateChord();\n}\n\nexport function updateChord() {\n  console.log('updating chord...');\n\n  const groupNodes = chordSVG.select('.nodes');\n  const groupArcs = chordSVG.select('.arcs');\n\n  groupNodes.selectAll('.node').remove();\n  groupArcs.selectAll('.arc').remove();\n\n  const myChord = d3.chord().padAngle(0.02);\n\n  const chords = myChord(getChordMatrix());\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(9))\n    .range(colors.selection);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  groupNodes.selectAll('g')\n    .data(chords.groups)\n    .enter().append('g')\n    .attr('class', 'node')\n    .append('path')\n    .attr('fill', (d, i) => color(i))\n    .attr('stroke', (d, i) => color(i))\n    .attr('d', arc)\n    .on('mouseover', mouseover)\n    .on('mouseout', mouseout)\n    .append('title').text(d => `${countryName(countries[d.index])}: ${d3.format('~s')(d.value)}`);\n\n  groupArcs.selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('class', 'arc')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    // .attr('stroke', d => d3.rgb(color(d.target.index)).darker())\n    .append('title').text(d => makeTitle(d));\n\n  function makeTitle(d) {\n    const isEmigration = store.get('isEmigration');\n    const countryOrder = isEmigration ? [d.source, d.target] : [d.target, d.source];\n    const valueOrder = [d.source, d.target];\n    const [c1, c2] = countryOrder.map(el => countryName(countries[el.index]));\n    const [v1, v2] = valueOrder.map(el => d3.format('~s')(el.value));\n    return `${c1} > ${c2}: ${v1}\\n${c2} > ${c1}: ${v2}`;\n  }\n\n  function mouseover(d, i) {\n    //const t = d.value; // threshold\n    const s = groupArcs.selectAll('.arc');\n    s.classed('fade', (p) => p.source.index !== i && p.target.index !== i);\n    s.classed('show', (p) => p.source.index === i);\n  }\n\n  function mouseout(d, i) {\n    groupArcs.selectAll('.arc.show').classed('show', false);\n    groupArcs.selectAll('.arc.fade').classed('fade', false);\n  }\n\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName, parseNaN, getMigration } from '../helpers';\n\nexport default {\n  draw: drawGraph,\n  update: updateGraph,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet graphSVG;\nlet svgDims;\nlet selectedCountries;\nlet compareData, migrationData, populationData;\n\nconst metrics = [\n  'GDP per capita',\n  'Social support',\n  'Healthy life expectancy',\n  'Freedom to make life choices',\n  'Perceptions of corruption',\n  // 'Confidence in government',\n];\n\nfunction loadDataset() {\n  const dataset = {};\n  if (!selectedCountries || selectedCountries.length === 0) return [];\n\n  for (let c of selectedCountries) {\n    const country = [];\n    for (let year in migrationData) {\n      const dataYear = migrationData[year];\n      if (dataYear[c] === undefined) continue; // no data\n\n      const migrants = Number(getMigration(dataYear, c));\n      const pop = populationData[c][year] * 1000;\n      const data = migrants /*/ pop*/;\n\n      country.push({ year: Number(year), value: Number(data) });\n    }\n    dataset[c] = country;\n  }\n\n  return dataset;\n}\n\nfunction loadCompareDataset() {\n  const dataset = {};\n  compareData.forEach(entry => {\n    if (dataset[entry.country] === undefined) {\n      dataset[entry.country] = [];\n    }\n    dataset[entry.country].push(parseNaN(entry));\n  });\n  return dataset;\n}\n\nexport function drawGraph(id, data, whrData, pop) {\n  const el = document.querySelector(id);\n  svgDims = { width: el.clientWidth, height: el.clientHeight };\n\n  graphSVG = createSVG(id, svgDims, margin);\n  migrationData = data;\n  populationData = pop;\n  compareData = whrData;\n\n  updateGraph();\n}\n\nexport function updateGraph() {\n  console.log('updating graph...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  selectedCountries = store.get('selectedCountries');\n\n  const dataset = loadDataset();\n  const compareDataset = loadCompareDataset();\n\n  const flatData = Object.values(dataset).reduce((acc, d) => acc.concat(d), []);\n\n  console.log(compareData);\n  console.log(compareDataset);\n\n  const axisDomain = (data, fn) => [d3.min(data, fn), d3.max(data, fn)];\n\n  const yearScale = d3.scaleLinear()\n    .domain(axisDomain(flatData, d => d.year)).nice()\n    .range([0, width]);\n\n  const migrantsScale = d3.scaleLinear()\n    .domain(axisDomain(flatData, d => d.value)).nice()\n    .range([height, 0]);\n\n  // scale for each metric\n  const metricsScale = metrics.map(metric =>\n    d3.scaleLinear()\n      .domain(axisDomain(compareData, d => +d[metric])).nice()\n      .range([height, 0]));\n\n  // scale for each country x metric\n  const metricsScale2 = selectedCountries.reduce((obj, country) => {\n    obj[country] = metrics.map(metric =>\n      d3.scaleLinear()\n        .domain(axisDomain(compareDataset[country], d => +d[metric])).nice()\n        .range([height, 0]));\n    return obj;\n  }, {});\n\n  const xAxis = d3.axisBottom(yearScale).tickFormat(d3.format('d'));\n  const yAxis1 = d3.axisLeft(migrantsScale).tickFormat(d3.format('~s'));\n  //const yAxis2 = d3.axisRight(yScale2).tickFormat(d3.format('~s'));\n\n  const line = d3.line()\n    .x(d => yearScale(d.year))\n    .y(d => migrantsScale(d.value))\n    .curve(d3.curveMonotoneX);\n\n  // CLEAR OLD ELEMENTS\n\n  graphSVG.selectAll('.country').remove();\n  graphSVG.selectAll('.xAxis').remove();\n  graphSVG.selectAll('.yAxis').remove();\n\n  // CREATE NEW ELEMENTS\n\n  graphSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  graphSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis1);\n\n  // graphSVG.append('g')\n  //   .attr('class', 'yAxis')\n  //   .attr('transform', `translate(${width},${0})`)\n  //   .call(yAxis2);\n\n  const ms = store.get('isEmigration') ? 'emigration' : 'immigration';\n\n\n  function showMetrics(g) {\n    graphSVG.selectAll('.selected').classed('selected', false);\n    g.selectAll('.metrics').classed('selected', true);\n  }\n\n  function hideMetrics(g) {\n    d3.event.preventDefault();\n    g.selectAll('.selected').classed('selected', false);\n    g.selectAll('.metrics').attr('visibility', 'hidden');\n  }\n\n  const countriesGroup = graphSVG.append('g')\n    .attr('class', 'countries');\n\n  let i = 0;\n  for (const country in dataset) {\n    const countryData = dataset[country];\n    const color = colors.selection[i++ % numColors];\n    const coName = countryName(country);\n\n    const countryGroup = countriesGroup.append('g')\n      .attr('id', country)\n      .attr('class', 'country')\n      .attr('name', coName);\n\n    countryGroup.append('path')  // line\n      .datum(countryData)\n      .attr('class', 'line')\n      .attr('stroke', color)\n      .attr('d', line)\n      .on('click', () => showMetrics(countryGroup))\n      .on('contextmenu', () => hideMetrics(countryGroup))\n      .on('mouseenter', () => countryGroup.selectAll('.metrics').attr('visibility', 'visible'))\n      .on('mouseout', () => countryGroup.selectAll('.metrics').attr('visibility', 'hidden'))\n      .append('title').text(() => `${coName} ${ms} line`);\n\n    countryGroup.append('g')    // line dots\n      .attr('class', 'dots')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .selectAll().data(countryData)\n      .enter().append('circle')\n      .attr('cx', (d) => yearScale(d.year))\n      .attr('cy', (d) => migrantsScale(d.value))\n      .attr('r', 3)\n      .append('title').text(d => `${coName} (${d.year}): ${d3.format('~s')(d.value)}`);\n\n    // correlation data\n\n    const metricsGroup = countryGroup.append('g')\n      .attr('class', 'metrics')\n      .attr('visibility', 'hidden');\n\n    metrics.forEach((met, i) => {\n      const color = d3.interpolateRainbow(i / metrics.length);\n\n      const line = d3.line()\n        .x(d => yearScale(d.year))\n        .y(d => metricsScale[i](d[met]))\n        .curve(d3.curveMonotoneX);\n\n      const metricGroup = metricsGroup.append('g')\n        .attr('class', 'metric');\n\n      metricGroup.append('path')  // line\n        .datum(compareDataset[country])\n        .attr('stroke', color)\n        .attr('fill', 'none')\n        .attr('opacity', 0.8)\n        .attr('d', line)\n        .append('title').text(() => met);\n\n      metricGroup.append('g')    // correlation circles\n        .attr('fill', color)\n        .attr('stroke', color)\n        .selectAll('circle')\n        .data(compareDataset[country])\n        .enter().append('circle')\n        .attr('class', 'circle')\n        .attr('cx', d => yearScale(d.year))\n        .attr('cy', d => metricsScale[i](d[met]))\n        .attr('r', 3)\n        .append('title').text(d => `${coName} (${d.year}): ${d[met]} ${met}`);\n    });\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName, getMigration } from '../helpers';\nimport { graph, chord } from '../idioms';\n\nexport default {\n  draw: drawMap,\n  update: updateMap,\n};\n\nlet mapSVG;\nlet migrationData, populationData;\n\nfunction mouseIn() { }\n\nfunction mouseOut() { }\n\nfunction clickRight(d) {\n  d3.event.preventDefault();\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.delete(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nfunction clickLeft(d) {\n  const forbidden = ['UNK', 'TWN', 'ATA'];\n  if (forbidden.includes(d.id)) return;\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.add(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\n\n\nexport function drawMap(id, topology, data, population) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  mapSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n  populationData = population;\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 5)\n    .translate([width / 2, height / 0.8]);\n\n  const path = d3.geoPath().projection(projection);\n  const zoom = d3.zoom()\n    .scaleExtent([0.6, 7])\n    .on('zoom', zoomed);\n\n  mapSVG.call(zoom);\n\n  const map = mapSVG.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(topology.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .on('click', clickLeft)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', clickRight)\n    .append('title').text(d => `${d.id}: ${d.properties.name}`);\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n  updateMap();\n}\n\nexport function updateMap() {\n  console.log('updating map...');\n\n  const selectedCountries = store.get('selectedCountries') || [];\n  const year = store.get('year') || 2010;\n  const dataYear = migrationData[year];\n\n  function getMigrants(d) {\n    if (dataYear[d.id] === undefined) return 0; // no data\n    const migrants = getMigration(dataYear, d.id);\n    const pop = populationData[d.id][year];\n\n    return migrants / pop || 0;\n  }\n\n  const color = d3.scaleThreshold()\n    .domain([-20, -10, -5, -2.5, 0, 2.5, 5, 10, 20])\n    .range(colors.map);\n\n  mapSVG.selectAll('path')\n    // .transition().duration(600)\n    .style('fill', (d) => color(getMigrants(d)))\n    .select('title').text(d =>\n      `${countryName(d.id)}: ${d3.format('.1f')(getMigrants(d))}/1000 population`\n    );\n\n  d3.selectAll('.selected').classed('selected', false);\n  selectedCountries.forEach((countryID, i) => {\n    d3.select('path#' + countryID)\n      .style('fill', colors.selection[i % numColors])\n      .classed('selected', true);\n  });\n\n  graph.update();\n  chord.update();\n}\n","import React from 'react';\nimport store from 'store';\nimport Slider from 'rc-slider';\nimport { map } from '../idioms';\n\nimport 'rc-slider/assets/index.css';\nimport './YearSlider.css';\n\nconst marks = {\n  1995: '1995',\n  2000: '2000',\n  2005: '2005',\n  2010: '2010',\n  2015: '2015',\n  2017: '2017',\n};\n\nfunction yearChange(params) {\n  store.set('year', params);\n  map.update();\n}\n\nexport default class YearSlider extends React.PureComponent {\n  render() {\n    const style = { padding: '0.4em 2em 0' };\n\n    return (\n      <div style={style}>\n        <Slider\n          min={1995}\n          max={2017}\n          included={false}\n          marks={marks}\n          step={null}\n          onChange={yearChange}\n          defaultValue={2010}\n          handleStyle={{ border: 'white', backgroundColor: 'silver' }} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nexport default class CountrySelect extends React.PureComponent {\n  render() {\n    const { countries } = this.props;\n    const options = countries.sort((a, b) => a.label < b.label ? -1 : 1);\n\n    return (\n      <Select isMulti\n        placeholder={'Select countries...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        {...this.props}\n      />);\n  }\n}\n","import React from 'react';\nimport store from 'store';\nimport Switch from 'react-switch';\n\nimport { map } from '../idioms';\n\nexport default class MigrationSwitch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { checked } = this.state;\n    store.set('isEmigration', checked);\n  }\n\n  handleChange(checked) {\n    store.set('isEmigration', checked);\n    this.setState({ checked });\n\n    map.update(); // map updates others\n  }\n\n  render() {\n    const { checked } = this.state;\n\n    return (\n      <div>\n        <Switch\n          onChange={this.handleChange}\n          checked={checked}\n          onColor=\"#FFCC80\"\n          offColor=\"#FFAB91\"\n          onHandleColor=\"#FFB74D\"\n          offHandleColor=\"#FF8A65\"\n          handleDiameter={24}\n          uncheckedIcon={false}\n          checkedIcon={false}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n          height={16}\n          width={64}\n          id={'mySwitcherino'}\n        />\n        <span>{checked ? 'Emigration' : 'Immigration'}</span>\n      </div>\n    );\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { tsv, json } from 'd3-fetch';\n\nimport YearSlider from './components/YearSlider';\n//import EventSelect from './components/EventSelect';\nimport CountrySelect from './components/CountrySelect';\nimport MigrationSwitch from './components/MigrationSwitch';\nimport { chord, graph, map } from './idioms';\nimport { byId, filterNaN, getMigrationDiff } from './helpers';\n\nimport './index.css';\n\n// STARTUP\n\nstore.remove('selectedCountries');\nstore.remove('isEmigration');\nstore.set('selectedCountries', ['PRT', 'ESP', 'FRA', 'DEU']);\n\n// DYNAMIC REAL DATA\n\nconst filesPromise = [\n  json('./data/topology.json'),\n  json('./data/migrations.json'),\n  tsv('./data/conversion.tsv'),\n  tsv('./data/population.tsv'),\n  tsv('./data/whr2018.tsv'),\n];\n\nPromise.all(filesPromise).then((dataResults) => handleData(dataResults));\n\nfunction handleData(data) {\n  const [topology, migrationData, conversion, population, whrData] = data;\n\n  const migrationDiff = getMigrationDiff(migrationData);\n\n  const codeToName = {};\n  const countryPop = {};\n  const countryWHR = {};\n  population.forEach((c) => countryPop[c.Country] = filterNaN(c));\n  whrData.forEach((c) => countryWHR[c.country] = filterNaN(c));\n  conversion.forEach(c => codeToName[c.code3] = c.name);\n  store.set('codeToName', codeToName);\n\n  // order is important, sadly\n  chord.draw('#chord', migrationData);\n  //plot.draw('#plot', whrData);\n  graph.draw('#graph', migrationDiff, whrData, countryPop);\n  map.draw('#map', topology, migrationDiff, countryPop);\n\n  ReactDOM.render(makeSelect(migrationDiff, codeToName), byId('countrySelect'));\n  // ReactDOM.render(<EventSelect />, byId('eventList'));\n  ReactDOM.render(<MigrationSwitch />, byId('migrationSwitch'));\n  ReactDOM.render(<YearSlider />, byId('yearSlider'));\n}\n\nfunction makeSelect(migrationData, codeToName) {\n  function countryChange(selection) {\n    const countries = new Set(store.get('selectedCountries'));\n    selection.forEach(el => countries.add(el.value));\n    store.set('selectedCountries', Array.from(countries));\n    map.update();\n  }\n\n  const countries = [];\n  Object.keys(migrationData[2000]).forEach(key => {\n    if (key.length !== 3) return;\n    countries.push({ value: key, label: codeToName[key] });\n  });\n\n  return (<CountrySelect countries={countries} onChange={countryChange} />\n  );\n}\n"],"sourceRoot":""}