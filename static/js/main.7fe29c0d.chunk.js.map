{"version":3,"sources":["helpers.js","idioms/chord.js","idioms/plot.js","idioms/lines.js","idioms/map.js","components/YearSlider.js","components/CountrySelect.js","components/MigrationSwitch.js","index.js"],"names":["filterNaN","obj","res","key","num","Number","isNaN","createSVG","id","dims","arguments","length","undefined","width","height","margins","svg","select","append","attr","concat","left","top","chordSVG","selectedCountries","migrationData","outerRadius","innerRadius","chord","draw","data","Math","min","updateChord","update","getChordMatrix","store","get","isEmigration","year","matrix","forEach","c","push","map","c2","val","error","getValue","console","log","groupNodes","groupArcs","selectAll","remove","chords","d3","padAngle","sortSubgroups","myChord","ribbon","radius","color","domain","range","arc","groups","enter","d","i","text","index","value","target","darker","countryOrder","source","valueOrder","_countryOrder$map","el","_countryOrder$map2","Object","slicedToArray","c1","_valueOrder$map","_valueOrder$map2","v1","v2","plotSVG","svgDims","compareData","plot","margin","updatePlot","right","bottom","flatData","reduce","acc","getDomain","dataset","fn","xScale","x","nice","yScale","y","xAxis","tickFormat","yAxis","call","linesSVG","populationData","lines","pop","updateLines","countries","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","country","dataYear","migrants","err","return","loadDataset","line","curve","datum","mapSVG","idioms_map","topology","population","projection","scale","translate","path","zoom","scaleExtent","on","transform","features","properties","name","clicked","mouseIn","mouseOut","contextMenu","updateMap","preventDefault","Set","delete","set","Array","from","includes","add","n","colors","getMigrants","style","classed","countryID","marks","1995","2000","2005","2010","2015","2017","yearChange","params","YearSlider","react_default","a","createElement","padding","es","max","step","onChange","defaultValue","React","PureComponent","CountrySelect","options","this","props","sort","b","label","react_select_esm","assign","isMulti","placeholder","components","makeAnimated","onBlurResetsInput","onSelectResetsInput","onCloseResetsInput","theme","objectSpread","borderRadius","neutral0","neutral5","neutral10","neutral20","primary25","neutral50","neutral80","MigrationSwitch","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","checked","handleChange","bind","assertThisInitialized","setState","react_switch_default","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","Component","plotData","filesPromise","json","tsv","countryChange","selection","Promise","all","then","dataResults","_data","conversion","whrData","migrationDiff","previousYear","dataYears","indexOf","keys","thisValue","prevValue","getMigrationDiff","codeToName","countryPop","countryWHR","Country","code3","ReactDOM","render","CountrySelect_CountrySelect","getSelect","document","getElementById","MigrationSwitch_MigrationSwitch","YearSlider_YearSlider","handleData"],"mappings":"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","file":"static/js/main.7fe29c0d.chunk.js","sourcesContent":["import { select } from 'd3';\n\nexport function tryNumber(value) {\n  return Number(value) || value;\n}\n\nexport function filterNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n\n    if (!isNaN(num) && num !== 0) {\n      res[key] = Number(obj[key]);\n    }\n  }\n\n  return res;\n}\n\nexport function createSVG(id, dims = { width: 400, height: 400 }, margins) {\n  const svg = select(id).append('svg')\n    .attr('width', dims.width)\n    .attr('height', dims.height);\n\n  if (margins !== undefined) {\n    const group = svg.append('g')\n      .attr('class', 'main')\n      .attr('transform', `translate(${margins.left || 0},${margins.top || 0})`);\n    return group;\n  }\n\n  return svg;\n}\n\nexport function getMigrationDiff(migrationData) {\n  function previousYear(dataYears, year) {\n    const i = dataYears.indexOf(year);\n    return (i > 0) ? dataYears[i - 1] : dataYears[0];\n  }\n\n  const migrationDiff = {};\n  const dataYears = Object.keys(migrationData);\n\n  for (const year in migrationData) {\n    if (year === dataYears[0]) continue;\n\n    migrationDiff[year] = {};\n    for (const c in migrationData[year]) {\n      migrationDiff[year][c] = {};\n\n      for (const c2 in migrationData[year][c]) {\n        const thisValue = migrationData[year][c];\n        const prevValue = migrationData[previousYear(dataYears, year)][c] || {};\n        migrationDiff[year][c][c2] = thisValue[c2] - (prevValue[c2] || 0);\n      }\n    }\n  }\n\n  return migrationDiff;\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG } from '../helpers';\n\nexport default {\n  draw: drawChord,\n  update: updateChord,\n};\n\nlet chordSVG;\nlet selectedCountries;\nlet migrationData;\n\nlet outerRadius, innerRadius;\n\nfunction getChordMatrix(data) {\n  selectedCountries = store.get('selectedCountries') || ['PRT', 'DEU', 'BRA', 'ESP', 'SWE', 'ITA'];\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const matrix = [];\n\n  function getValue(c, c2) {\n    let val;\n    try {\n      val = isEmigration ? data[year][c2][c] : data[year][c][c2];\n    } catch (error) {\n      val = 0;\n    }\n    return val || 0;\n  }\n\n  selectedCountries.forEach(c => {\n    matrix.push(selectedCountries.map(c2 => getValue(c, c2)));\n  });\n\n  return matrix;\n}\n\nexport function drawChord(id, width, height, data) {\n  chordSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n\n  outerRadius = Math.min(width, height) * 0.5 - 30;\n  innerRadius = outerRadius - 20;\n\n  chordSVG.attr('viewBox', [-width / 2, -height / 2, width, height]);\n\n  chordSVG.append('g')\n    .attr('class', 'nodes');\n\n  chordSVG.append('g')\n    .attr('class', 'arcs')\n    .attr('fill-opacity', 0.8);\n\n  updateChord();\n}\n\nexport function updateChord() {\n  console.log('updating chord...');\n\n  const groupNodes = chordSVG.select('.nodes');\n  const groupArcs = chordSVG.select('.arcs');\n\n  groupNodes.selectAll('.node').remove();\n  groupArcs.selectAll('.arc').remove();\n\n  const myChord = d3.chord()\n    .padAngle(0.04)\n    .sortSubgroups(d3.descending);\n\n  const chords = myChord(getChordMatrix(migrationData));\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(9))\n    .range(d3.schemeSpectral[9]);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  groupNodes.selectAll('g')\n    .data(chords.groups)\n    .enter().append('g')\n    .attr('class', 'node')\n    .append('path')\n    .attr('fill', (d, i) => color(i))\n    .attr('stroke', (d, i) => color(i))\n    .attr('d', arc)\n    .append('title').text(d => `${selectedCountries[d.index]}: ${d3.format('~s')(d.value)}`);\n\n  groupArcs.selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('class', 'arc')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    .attr('stroke', d => d3.rgb(color(d.target.index)).darker())\n    .append('title').text(d => {\n      const isEmigration = store.get('isEmigration');\n      const countryOrder = isEmigration ? [d.source, d.target] : [d.target, d.source];\n      const valueOrder = [d.source, d.target];\n      const [c1, c2] = countryOrder.map(el => selectedCountries[el.index]);\n      const [v1, v2] = valueOrder.map(el => d3.format('~s')(el.value));\n      return `${c1} > ${c2}: ${v1}\\n${c2} > ${c1}: ${v2}`;\n    });\n\n}\n","import * as d3 from 'd3';\nimport { createSVG } from '../helpers';\n\nexport default {\n  draw: drawPlot,\n  update: updatePlot,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet plotSVG;\nlet svgDims;\nlet compareData;\n\nexport function drawPlot(id, width, height, data) {\n  svgDims = { width, height };\n  plotSVG = createSVG(id, { width, height }, margin);\n\n  compareData = data;\n\n  updatePlot();\n}\n\nexport function updatePlot() {\n  console.log('updating plot...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  const flatData = compareData.reduce((acc, d) => acc.concat(d), []);\n  const getDomain = (dataset, fn) => [d3.min(dataset, fn), d3.max(dataset, fn)];\n\n  const xScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.x)).nice()\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.y)).nice()\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.format('d'));\n  const yAxis = d3.axisLeft(yScale)\n    .tickFormat(d3.format('~s'));\n\n  // CLEAR OLD ELEMENTS\n\n  plotSVG.selectAll('.circle').remove();\n\n  // CREATE NEW ELEMENTS\n\n  plotSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  plotSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis);\n\n  plotSVG.append('g')\n    .attr('class', 'circles')\n    .selectAll('circle')\n    .data(compareData)\n    .enter().append('circle')\n    .attr('class', 'circle')\n    .attr('cx', d => d.x)\n    .attr('cy', d => d.y)\n    .attr('r', 4);\n\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG } from '../helpers';\n\nexport default {\n  draw: drawLines,\n  update: updateLines,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet linesSVG;\nlet svgDims;\nlet migrationData;\nlet populationData;\n\nfunction loadDataset() {\n  const dataset = [];\n  const countries = store.get('selectedCountries');\n  if (!countries || countries.length === 0) return [];\n\n  const isEmigration = store.get('isEmigration');\n\n  for (let c of countries) {\n    const country = [];\n    for (let year in migrationData) {\n      const dataYear = migrationData[year];\n      if (dataYear[c] === undefined) continue; // no data\n\n      const migrants = Number(isEmigration ? dataYear['WORLD'][c] : dataYear[c]['Total']);\n      const pop = populationData[c][year] * 1000;\n      const data = migrants /*/ pop*/;\n\n      country.push({ year: Number(year), value: Number(data) });\n    }\n    dataset.push(country);\n  }\n\n  return dataset;\n}\n\nexport function drawLines(id, width, height, data, pop) {\n  svgDims = { width, height };\n  linesSVG = createSVG(id, { width, height }, margin);\n  migrationData = data;\n  populationData = pop;\n\n  updateLines();\n}\n\nexport function updateLines() {\n  console.log('updating lines...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  const dataset = loadDataset();\n\n  const flatData = dataset.reduce((acc, d) => acc.concat(d), []);\n  const getDomain = (dataset, fn) => [d3.min(dataset, fn), d3.max(dataset, fn)];\n\n  const xScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.year)).nice()\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.value)).nice()\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.format('d'));\n  const yAxis = d3.axisLeft(yScale)\n    .tickFormat(d3.format('~s'));\n\n  const line = d3.line()\n    .x(d => xScale(d.year))\n    .y(d => yScale(d.value))\n    .curve(d3.curveMonotoneX);\n\n  // CLEAR OLD ELEMENTS\n\n  linesSVG.selectAll('.dots').remove();\n  linesSVG.selectAll('.line').remove();\n  linesSVG.select('.xAxis').remove();\n  linesSVG.select('.yAxis').remove();\n\n  // CREATE NEW ELEMENTS\n\n  linesSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  linesSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis);\n\n  for (let i = 0; i < dataset.length; i++) {\n    const num = 6;\n    const color = d3.schemeRdYlGn[num][i % num];\n\n    linesSVG.append('path')\n      .datum(dataset[i])\n      .attr('stroke', color)\n      .attr('class', 'line')\n      .attr('d', line);\n\n    linesSVG.append('g')\n      .attr('class', 'dots')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .selectAll().data(dataset[i])\n      .enter().append('circle')\n      .attr('cx', (d) => xScale(d.year))\n      .attr('cy', (d) => yScale(d.value))\n      .attr('r', 5);\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG } from '../helpers';\nimport { lines, chord } from '../idioms';\n\nexport default {\n  draw: drawMap,\n  update: updateMap,\n};\n\nlet mapSVG;\nlet migrationData, populationData;\n\nfunction mouseIn() { }\n\nfunction mouseOut() { }\n\nfunction contextMenu(d) {\n  d3.event.preventDefault();\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.delete(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nfunction clicked(d) {\n  const forbidden = ['UNK', 'TWN', 'ATA'];\n  if (forbidden.includes(d.id)) return;\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.add(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nconst color = d3.scaleThreshold()\n  .domain([1, 10, 100, 250, 500, 1000, 2500, 5000, 10000].map(n => n * 1000))\n  .range(d3.schemeGreys[9]);\n\nexport function drawMap(id, width, height, topology, data, population) {\n  mapSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n  populationData = population;\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 4)\n    .translate([width / 2, height / 1.2]);\n\n  const path = d3.geoPath().projection(projection);\n  const zoom = d3.zoom()\n    .scaleExtent([0.6, 7])\n    .on('zoom', zoomed);\n\n  mapSVG.call(zoom);\n\n  const map = mapSVG.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(topology.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .on('click', clicked)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', contextMenu)\n    .append('title').text(d => `${d.id}: ${d.properties.name}`);\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n  updateMap();\n}\n\nexport function updateMap() {\n  console.log('updating map...');\n\n  const selectedCountries = store.get('selectedCountries') || [];\n  const num = 9;\n  const colors = d3.schemeSpectral[num];\n\n  const year = store.get('year') || 2010;\n  const isEmigration = store.get('isEmigration');\n\n  function getMigrants(d) {\n    const dataYear = migrationData[year];\n    if (dataYear[d.id] === undefined) return 0; // no data\n    const migrants = isEmigration ? dataYear['WORLD'][d.id] : dataYear[d.id]['Total'];\n    const pop = populationData[d.id][year] * 1000;\n\n    return migrants || 0;\n  }\n\n  mapSVG.selectAll('path')\n    //.transition().duration(600)\n    .style('fill', (d) => color(getMigrants(d)))\n    .select('title').text(d => `${d.id}: ${d3.format('~s')(getMigrants(d))}`);\n\n  d3.selectAll('.selected').classed('selected', false);\n  selectedCountries.forEach((countryID, i) => {\n    d3.select('path#' + countryID)\n      .style('fill', colors[i % num])\n      .classed('selected', true);\n  });\n\n  lines.update();\n  chord.update();\n}\n","import React from 'react';\nimport store from 'store';\nimport Slider from 'rc-slider';\nimport { map } from '../idioms';\n\nimport 'rc-slider/assets/index.css';\n\nconst marks = {\n  1995: '1995',\n  2000: '2000',\n  2005: '2005',\n  2010: '2010',\n  2015: '2015',\n  2017: '2017',\n};\n\nfunction yearChange(params) {\n  console.log(params);\n  store.set('year', params);\n  map.update();\n}\n\nexport default class YearSlider extends React.PureComponent {\n  render() {\n    const style = { padding: '0.6em 2em 0' };\n\n    return (\n      <div style={style}>\n        <Slider\n          min={1995}\n          max={2017}\n          marks={marks}\n          step={null}\n          onChange={yearChange}\n          defaultValue={2010} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nexport default class CountrySelect extends React.PureComponent {\n  render() {\n    const { countries } = this.props;\n    const options = countries.sort((a, b) => a.label < b.label ? -1 : 1);\n\n    return (\n      <Select isMulti\n        placeholder={'Select countries...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        {...this.props}\n      />);\n  }\n}\n","import React from 'react';\nimport store from 'store';\nimport Switch from 'react-switch';\n\nimport { map } from '../idioms';\n\nexport default class MigrationSwitch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { checked } = this.state;\n    store.set('isEmigration', checked);\n  }\n\n  handleChange(checked) {\n    store.set('isEmigration', checked);\n    this.setState({ checked });\n\n    map.update(); // map updates others\n  }\n\n  render() {\n    const { checked } = this.state;\n\n    return (\n      <div>\n        <Switch\n          onChange={this.handleChange}\n          checked={checked}\n          onColor=\"#86d3ff\"\n          onHandleColor=\"#2693e6\"\n          handleDiameter={24}\n          uncheckedIcon={false}\n          checkedIcon={false}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n          height={16}\n          width={64}\n          id={'mySwitcherino'}\n        />\n        <span>{checked ? 'Emigration' : 'Immigration'}</span>\n      </div>\n    );\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { tsv, json } from 'd3-fetch';\n\nimport YearSlider from './components/YearSlider';\nimport CountrySelect from './components/CountrySelect';\nimport MigrationSwitch from './components/MigrationSwitch';\nimport { chord, plot, lines, map } from './idioms';\nimport { filterNaN, getMigrationDiff } from './helpers';\n\nimport './index.css';\nimport './idioms.css';\n\n// STARTUP\n\nstore.remove('selectedCountries');\nstore.remove('isEmigration');\n\nstore.set('selectedCountries', ['PRT', 'SWE', 'UKR']);\n\n// STATIC TEST DATA\n\nconst plotData = [\n  { x: 21, y: 110 },\n  { x: 22.8, y: 93 },\n  { x: 18.7, y: 175 },\n  { x: 14.3, y: 245 },\n  { x: 24.4, y: 62 },\n  { x: 14.7, y: 230 },\n  { x: 32.4, y: 66 },\n  { x: 30.4, y: 52 },\n  { x: 33.9, y: 65 },\n  { x: 15.5, y: 150 },\n  { x: 15.2, y: 150 },\n  { x: 13.3, y: 245 },\n  { x: 19.2, y: 175 },\n  { x: 27.3, y: 66 },\n  { x: 26, y: 91 },\n  { x: 30.4, y: 113 },\n  { x: 15.8, y: 264 },\n  { x: 19.7, y: 175 },\n  { x: 15, y: 335 },\n  { x: 21.4, y: 109 }\n];\n\n// DYNAMIC REAL DATA\n\nconst filesPromise = [\n  json('./data/topology.json'),\n  json('./data/migrations.json'),\n  tsv('./data/conversion.tsv'),\n  tsv('./data/population.tsv'),\n  tsv('./data/whr2017.tsv'),\n];\n\nPromise.all(filesPromise).then((dataResults) => handleData(dataResults));\n\nfunction handleData(data) {\n  const [topology, migrationData, conversion, population, whrData] = data;\n\n  console.log(migrationData);\n  const migrationDiff = getMigrationDiff(migrationData);\n\n  console.log(migrationDiff);\n\n  const codeToName = {};\n  const countryPop = {};\n  const countryWHR = {};\n  population.forEach((c) => countryPop[c.Country] = filterNaN(c));\n  whrData.forEach((c) => countryWHR[c.country] = filterNaN(c));\n  conversion.forEach(c => codeToName[c.code3] = c.name);\n  store.set('codeToName', codeToName);\n\n  // order is important, sadly\n  chord.draw('#chord', 600, 420, migrationData);\n  plot.draw('#plot', 600, 420, plotData);\n  lines.draw('#lines', 1000, 420, migrationDiff, countryPop);\n  map.draw('#map', 1000, 420, topology, migrationDiff, countryPop);\n\n  ReactDOM.render(getSelect(migrationDiff, codeToName), document.getElementById('countrySelect'));\n  ReactDOM.render(<MigrationSwitch />, document.getElementById('migrationSwitch'));\n  ReactDOM.render(<YearSlider />, document.getElementById('yearSlider'));\n}\n\nfunction getSelect(data, codeToName, value) {\n  const countries = [];\n  Object.keys(data[2000]).forEach(key => {\n    if (key.length === 3) {\n      countries.push({ value: key, label: codeToName[key], /*group: c.region*/ });\n    }\n  });\n\n  return (\n    <CountrySelect\n      value={value}\n      countries={countries}\n      onChange={countryChange} />\n  );\n}\n\nfunction countryChange(selection) {\n  const countries = new Set(store.get('selectedCountries'));\n  selection.forEach(el => countries.add(el.value));\n  store.set('selectedCountries', Array.from(countries));\n  map.update();\n}\n"],"sourceRoot":""}