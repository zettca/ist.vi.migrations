{"version":3,"sources":["helpers.js","idioms/chord.js","idioms/lines.js","idioms/map.js","components/YearSlider.js","components/CountrySelect.js","components/MigrationSwitch.js","index.js"],"names":["numColors","colors","map","d3","selection","countryName","code","store","get","filterNaN","obj","res","key","num","Number","isNaN","byId","id","document","getElementById","createSVG","dims","arguments","length","undefined","width","height","margins","svg","append","attr","concat","left","top","chordSVG","selectedCountries","migrationData","outerRadius","innerRadius","chord","draw","data","el","querySelector","_ref","clientWidth","clientHeight","Math","min","updateChord","update","getChordMatrix","Object","keys","slice","isEmigration","year","matrix","forEach","c","push","c2","val","error","getValue","console","log","groupNodes","select","groupArcs","selectAll","remove","chords","padAngle","myChord","ribbon","radius","color","domain","range","arc","groups","enter","d","i","on","s","classed","p","source","index","target","text","value","countryOrder","valueOrder","_countryOrder$map","_countryOrder$map2","slicedToArray","c1","_valueOrder$map","_valueOrder$map2","v1","v2","makeTitle","linesSVG","svgDims","compareData","populationData","lines","whrData","pop","margin","updateLines","right","bottom","metric","loadCompareDataset","dataset","entry","country","parseNaN","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","dataYear","migrants","err","return","loadDataset","values","compareDataset","flatData","reduce","acc","filterData","filter","includes","xScale","fn","xDomain","nice","yScale1","y1Domain","yScale2","y2Domain","xAxis","tickFormat","yAxis1","line","x","y","curve","call","_loop","name","countryGroup","datum","mapSVG","idioms_map","topology","population","projection","scale","translate","path","zoom","scaleExtent","transform","features","properties","clicked","mouseIn","mouseOut","contextMenu","updateMap","preventDefault","Set","delete","set","Array","from","add","getMigrants","n","style","countryID","marks","1995","2000","2005","2010","2015","2017","yearChange","params","YearSlider","react_default","a","createElement","padding","es","max","included","step","onChange","defaultValue","handleStyle","border","backgroundColor","React","PureComponent","CountrySelect","options","this","props","countries","sort","b","label","react_select_esm","assign","isMulti","placeholder","components","makeAnimated","onBlurResetsInput","onSelectResetsInput","onCloseResetsInput","theme","objectSpread","borderRadius","neutral0","neutral5","neutral10","neutral20","primary25","neutral50","neutral80","MigrationSwitch","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","checked","handleChange","bind","assertThisInitialized","setState","react_switch_default","onColor","offColor","onHandleColor","offHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","Component","filesPromise","json","tsv","Promise","all","then","dataResults","_data","conversion","migrationDiff","previousYear","dataYears","indexOf","thisValue","prevValue","getMigrationDiff","codeToName","countryPop","countryWHR","Country","code3","ReactDOM","render","CountrySelect_CountrySelect","makeSelect","MigrationSwitch_MigrationSwitch","YearSlider_YearSlider","handleData"],"mappings":"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","file":"static/js/main.b6eaf74d.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport store from 'store';\n\nexport function tryNumber(value) {\n  return Number(value) || value;\n}\n\nexport const numColors = 9;\n\nexport const colors = {\n  map: d3.schemeBlues[numColors],\n  selection: d3.schemeReds[numColors]\n};\n\nexport function countryName(code) {\n  const codeToName = store.get('codeToName');\n  return codeToName[code];\n}\n\nexport function filterNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    if (!isNaN(num) && num !== 0) {\n      res[key] = num;\n    }\n  }\n\n  return res;\n}\n\nexport function parseNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    res[key] = num || obj[key];\n  }\n\n  return res;\n}\n\nexport function byId(id) {\n  return document.getElementById(id);\n}\n\nexport function createSVG(id, dims = { width: 400, height: 400 }, margins) {\n  const svg = d3.select(id).append('svg')\n    .attr('width', dims.width)\n    .attr('height', dims.height);\n\n  if (margins !== undefined) {\n    const group = svg.append('g')\n      .attr('class', 'main')\n      .attr('transform', `translate(${margins.left || 0},${margins.top || 0})`);\n    return group;\n  }\n\n  return svg;\n}\n\nexport function getMigrationDiff(migrationData) {\n  function previousYear(dataYears, year) {\n    const i = dataYears.indexOf(year);\n    return (i > 0) ? dataYears[i - 1] : dataYears[0];\n  }\n\n  const migrationDiff = {};\n  const dataYears = Object.keys(migrationData);\n\n  for (const year in migrationData) {\n    if (year === dataYears[0]) continue;\n\n    migrationDiff[year] = {};\n    for (const c in migrationData[year]) {\n      migrationDiff[year][c] = {};\n\n      for (const c2 in migrationData[year][c]) {\n        const thisValue = migrationData[year][c];\n        const prevValue = migrationData[previousYear(dataYears, year)][c] || {};\n        migrationDiff[year][c][c2] = thisValue[c2] - (prevValue[c2] || 0);\n      }\n    }\n  }\n\n  return migrationDiff;\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, countryName } from '../helpers';\n\nexport default {\n  draw: drawChord,\n  update: updateChord,\n};\n\nlet chordSVG;\nlet selectedCountries;\nlet migrationData;\n\nlet outerRadius, innerRadius;\n\nfunction getChordMatrix() {\n  //selectedCountries = store.get('selectedCountries');\n  selectedCountries = Object.keys(migrationData[2010]['WORLD']).slice(1, 40);\n\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const matrix = [];\n\n  function getValue(c, c2) {\n    let val;\n    try {\n      val = isEmigration ? migrationData[year][c2][c] : migrationData[year][c][c2];\n    } catch (error) {\n      val = 0;\n    }\n    return val || 0;\n  }\n\n  selectedCountries.forEach(c => {\n    matrix.push(selectedCountries.map(c2 => getValue(c, c2)));\n  });\n\n  return matrix;\n}\n\nexport function drawChord(id, data) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  chordSVG = createSVG(id, { width, height });\n  outerRadius = Math.min(width, height) * 0.5;\n  innerRadius = outerRadius - 20;\n\n  migrationData = data;\n\n  chordSVG.attr('viewBox', [-width / 2, -height / 2, width, height]);\n  chordSVG.append('g').attr('class', 'nodes');\n  chordSVG.append('g').attr('class', 'arcs');\n\n  updateChord();\n}\n\nexport function updateChord() {\n  console.log('updating chord...');\n\n  const groupNodes = chordSVG.select('.nodes');\n  const groupArcs = chordSVG.select('.arcs');\n\n  groupNodes.selectAll('.node').remove();\n  groupArcs.selectAll('.arc').remove();\n\n  const myChord = d3.chord().padAngle(0.02);\n\n  const chords = myChord(getChordMatrix());\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(9))\n    .range(colors.selection);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  groupNodes.selectAll('g')\n    .data(chords.groups)\n    .enter().append('g')\n    .attr('class', 'node')\n    .append('path')\n    .attr('fill', (d, i) => color(i))\n    .attr('stroke', (d, i) => color(i))\n    .attr('d', arc)\n    .on('mouseover', mouseover)\n    .on('mouseout', mouseout)\n    .append('title').text(d => `${countryName(selectedCountries[d.index])}: ${d3.format('~s')(d.value)}`);\n\n  groupArcs.selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('class', 'arc')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    // .attr('stroke', d => d3.rgb(color(d.target.index)).darker())\n    .append('title').text(d => makeTitle(d));\n\n  function makeTitle(d) {\n    const isEmigration = store.get('isEmigration');\n    const countryOrder = isEmigration ? [d.source, d.target] : [d.target, d.source];\n    const valueOrder = [d.source, d.target];\n    const [c1, c2] = countryOrder.map(el => countryName(selectedCountries[el.index]));\n    const [v1, v2] = valueOrder.map(el => d3.format('~s')(el.value));\n    return `${c1} > ${c2}: ${v1}\\n${c2} > ${c1}: ${v2}`;\n  }\n\n  function mouseover(d, i) {\n    //const t = d.value; // threshold\n    const s = groupArcs.selectAll('.arc');\n    s.classed('fade', (p) => p.source.index !== i && p.target.index !== i);\n    s.classed('show', (p) => p.source.index === i);\n  }\n\n  function mouseout(d, i) {\n    groupArcs.selectAll('.arc.show').classed('show', false);\n    groupArcs.selectAll('.arc.fade').classed('fade', false);\n  }\n\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName, parseNaN } from '../helpers';\n\nexport default {\n  draw: drawLines,\n  update: updateLines,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet linesSVG;\nlet svgDims;\nlet compareData;\nlet migrationData;\nlet populationData;\nlet selectedCountries;\n\nconst metrics = [\n  'GDP per capita',\n  'Confidence in government',\n  'Freedom to make life choices',\n  'Generosity',\n  'Healthy life expectancy',\n  'Life Ladder',\n  'Perceptions of corruption',\n  'Social support',\n];\nconst metric = metrics[0];\n\nfunction loadDataset() {\n  const dataset = {};\n  selectedCountries = store.get('selectedCountries');\n  if (!selectedCountries || selectedCountries.length === 0) return [];\n\n  const isEmigration = store.get('isEmigration');\n\n  for (let c of selectedCountries) {\n    const country = [];\n    for (let year in migrationData) {\n      const dataYear = migrationData[year];\n      if (dataYear[c] === undefined) continue; // no data\n\n      const migrants = Number(isEmigration ? dataYear['WORLD'][c] : dataYear[c]['Total']);\n      const pop = populationData[c][year] * 1000;\n      const data = migrants /*/ pop*/;\n\n      country.push({ year: Number(year), value: Number(data) });\n    }\n    dataset[c] = country;\n  }\n\n  return dataset;\n}\n\nfunction loadCompareDataset() {\n  const dataset = {};\n  compareData.forEach(entry => {\n    if (dataset[entry.country] === undefined) {\n      dataset[entry.country] = {};\n    }\n    dataset[entry.country][entry.year] = parseNaN(entry);\n  });\n  return dataset;\n}\n\nexport function drawLines(id, data, whrData, pop) {\n  const el = document.querySelector(id);\n  svgDims = { width: el.clientWidth, height: el.clientHeight };\n\n\n  linesSVG = createSVG(id, svgDims, margin);\n  migrationData = data;\n  populationData = pop;\n  compareData = whrData;\n\n  updateLines();\n}\n\nexport function updateLines() {\n  console.log('updating lines...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  const data = loadDataset();\n  const dataset = Object.values(data);\n  const compareDataset = loadCompareDataset();\n\n  const flatData = dataset.reduce((acc, d) => acc.concat(d), []);\n  const filterData = compareData.filter(el => selectedCountries.includes(el.country));\n  const xDomain = (data, fn) => [d3.min(data, fn), d3.max(data, fn)];\n  const y1Domain = (data, fn) => [Math.min(0, d3.min(data, fn)), d3.max(data, fn)];\n  const y2Domain = (data, fn) => [d3.min(data, fn), d3.max(data, fn)];\n\n  const xScale = d3.scaleLinear()\n    .domain(xDomain(flatData, d => d.year)).nice()\n    .range([0, width]);\n\n  const yScale1 = d3.scaleLinear()\n    .domain(y1Domain(flatData, d => d.value)).nice()\n    .range([height, 0]);\n\n  const yScale2 = d3.scaleLinear()\n    .domain(y2Domain(filterData, d => +d[metric])).nice()\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.format('d'));\n  const yAxis1 = d3.axisLeft(yScale1)\n    .tickFormat(d3.format('~s'));\n  const yAxis2 = d3.axisRight(yScale2)\n    .tickFormat(d3.format('~s'));\n\n  const line = d3.line()\n    .x(d => xScale(d.year))\n    .y(d => yScale1(d.value))\n    .curve(d3.curveMonotoneX);\n\n  // CLEAR OLD ELEMENTS\n\n  linesSVG.selectAll('.country').remove();\n  linesSVG.selectAll('.xAxis').remove();\n  linesSVG.selectAll('.yAxis').remove();\n\n  // CREATE NEW ELEMENTS\n\n  linesSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  linesSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis1);\n\n  // linesSVG.append('g')\n  //   .attr('class', 'yAxis')\n  //   .attr('transform', `translate(${width},${0})`)\n  //   .call(yAxis2);\n\n  for (let i = 0; i < dataset.length; i++) {\n    const color = colors.selection[i % numColors];\n    const name = countryName(selectedCountries[i]);\n\n    const countryGroup = linesSVG.append('g')\n      .attr('class', 'country')\n      .attr('name', name);\n\n    countryGroup.append('path')  // line\n      .datum(dataset[i])\n      .attr('stroke', color)\n      .attr('class', 'line')\n      .attr('d', line);\n\n    countryGroup.append('g')    // line dots\n      .attr('class', 'dots')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .selectAll().data(dataset[i])\n      .enter().append('circle')\n      .attr('cx', (d) => xScale(d.year))\n      .attr('cy', (d) => yScale1(d.value))\n      .attr('r', 3)\n      .append('title').text(d => `${name} (${d.year}): ${d3.format('~s')(d.value)}`);\n\n    countryGroup.append('g')    // correlation circles\n      .attr('class', 'circles')\n      .selectAll('circle')\n      .data(Object.values(compareDataset[selectedCountries[i]]))\n      .enter().append('circle')\n      .attr('class', 'circle')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .attr('cx', d => xScale(d.year))\n      .attr('cy', d => yScale2(d[metric]))\n      .attr('r', 5);\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName } from '../helpers';\nimport { lines, chord, plot } from '../idioms';\n\nexport default {\n  draw: drawMap,\n  update: updateMap,\n};\n\nlet mapSVG;\nlet migrationData, populationData;\n\nfunction mouseIn() { }\n\nfunction mouseOut() { }\n\nfunction contextMenu(d) {\n  d3.event.preventDefault();\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.delete(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nfunction clicked(d) {\n  const forbidden = ['UNK', 'TWN', 'ATA'];\n  if (forbidden.includes(d.id)) return;\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.add(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nexport function drawMap(id, topology, data, population) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  mapSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n  populationData = population;\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 5)\n    .translate([width / 2, height / 0.8]);\n\n  const path = d3.geoPath().projection(projection);\n  const zoom = d3.zoom()\n    .scaleExtent([0.6, 7])\n    .on('zoom', zoomed);\n\n  mapSVG.call(zoom);\n\n  const map = mapSVG.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(topology.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .on('click', clicked)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', contextMenu)\n    .append('title').text(d => `${d.id}: ${d.properties.name}`);\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n  updateMap();\n}\n\nexport function updateMap() {\n  console.log('updating map...');\n\n  const selectedCountries = store.get('selectedCountries') || [];\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const dataYear = migrationData[year];\n\n  function getMigrants(d) {\n    if (dataYear[d.id] === undefined) return 0; // no data\n    const migrants = isEmigration ? dataYear['WORLD'][d.id] : dataYear[d.id]['Total'];\n    const pop = populationData[d.id][year] * 1000;\n    return migrants || 0;\n  }\n\n  const color = d3.scaleThreshold()\n    .domain([-10, -5, -2, -1, 0, 1, 2, 5, 10].map(n => n * 100 * 1000))\n    .range(colors.map);\n\n  mapSVG.selectAll('path')\n    // .transition().duration(600)\n    .style('fill', (d) => color(getMigrants(d)))\n    .select('title').text(d => `${countryName(d.id)}: ${d3.format('~s')(getMigrants(d))}`);\n\n  d3.selectAll('.selected').classed('selected', false);\n  selectedCountries.forEach((countryID, i) => {\n    d3.select('path#' + countryID)\n      .style('fill', colors.selection[i % numColors])\n      .classed('selected', true);\n  });\n\n  lines.update();\n  chord.update();\n  //plot.update();\n}\n","import React from 'react';\nimport store from 'store';\nimport Slider from 'rc-slider';\nimport { map } from '../idioms';\n\nimport 'rc-slider/assets/index.css';\nimport './YearSlider.css';\n\nconst marks = {\n  1995: '1995',\n  2000: '2000',\n  2005: '2005',\n  2010: '2010',\n  2015: '2015',\n  2017: '2017',\n};\n\nfunction yearChange(params) {\n  store.set('year', params);\n  map.update();\n}\n\nexport default class YearSlider extends React.PureComponent {\n  render() {\n    const style = { padding: '0.4em 2em 0' };\n\n    return (\n      <div style={style}>\n        <Slider\n          min={1995}\n          max={2017}\n          included={false}\n          marks={marks}\n          step={null}\n          onChange={yearChange}\n          defaultValue={2010}\n          handleStyle={{ border: 'white', backgroundColor: 'silver' }} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nexport default class CountrySelect extends React.PureComponent {\n  render() {\n    const { countries } = this.props;\n    const options = countries.sort((a, b) => a.label < b.label ? -1 : 1);\n\n    return (\n      <Select isMulti\n        placeholder={'Select countries...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        {...this.props}\n      />);\n  }\n}\n","import React from 'react';\nimport store from 'store';\nimport Switch from 'react-switch';\n\nimport { map } from '../idioms';\n\nexport default class MigrationSwitch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { checked } = this.state;\n    store.set('isEmigration', checked);\n  }\n\n  handleChange(checked) {\n    store.set('isEmigration', checked);\n    this.setState({ checked });\n\n    map.update(); // map updates others\n  }\n\n  render() {\n    const { checked } = this.state;\n\n    return (\n      <div>\n        <Switch\n          onChange={this.handleChange}\n          checked={checked}\n          onColor=\"#FFCC80\"\n          offColor=\"#FFAB91\"\n          onHandleColor=\"#FFB74D\"\n          offHandleColor=\"#FF8A65\"\n          handleDiameter={24}\n          uncheckedIcon={false}\n          checkedIcon={false}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n          height={16}\n          width={64}\n          id={'mySwitcherino'}\n        />\n        <span>{checked ? 'Emigration' : 'Immigration'}</span>\n      </div>\n    );\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { tsv, json } from 'd3-fetch';\n\nimport YearSlider from './components/YearSlider';\n//import EventSelect from './components/EventSelect';\nimport CountrySelect from './components/CountrySelect';\nimport MigrationSwitch from './components/MigrationSwitch';\nimport { chord, lines, map } from './idioms';\nimport { byId, filterNaN, getMigrationDiff } from './helpers';\n\nimport './index.css';\nimport './idioms.css';\n\n// STARTUP\n\nstore.remove('selectedCountries');\nstore.remove('isEmigration');\nstore.set('selectedCountries', ['PRT', 'ESP', 'FRA', 'DEU']);\n\n// DYNAMIC REAL DATA\n\nconst filesPromise = [\n  json('./data/topology.json'),\n  json('./data/migrations.json'),\n  tsv('./data/conversion.tsv'),\n  tsv('./data/population.tsv'),\n  tsv('./data/whr2018.tsv'),\n];\n\nPromise.all(filesPromise).then((dataResults) => handleData(dataResults));\n\nfunction handleData(data) {\n  const [topology, migrationData, conversion, population, whrData] = data;\n\n  const migrationDiff = getMigrationDiff(migrationData);\n\n  const codeToName = {};\n  const countryPop = {};\n  const countryWHR = {};\n  population.forEach((c) => countryPop[c.Country] = filterNaN(c));\n  whrData.forEach((c) => countryWHR[c.country] = filterNaN(c));\n  conversion.forEach(c => codeToName[c.code3] = c.name);\n  store.set('codeToName', codeToName);\n\n  // order is important, sadly\n  chord.draw('#chord', migrationData);\n  //plot.draw('#plot', whrData);\n  lines.draw('#lines', migrationDiff, whrData, countryPop);\n  map.draw('#map', topology, migrationDiff, countryPop);\n\n  ReactDOM.render(makeSelect(migrationDiff, codeToName), byId('countrySelect'));\n  // ReactDOM.render(<EventSelect />, byId('eventList'));\n  ReactDOM.render(<MigrationSwitch />, byId('migrationSwitch'));\n  ReactDOM.render(<YearSlider />, byId('yearSlider'));\n}\n\nfunction makeSelect(migrationData, codeToName) {\n  function countryChange(selection) {\n    const countries = new Set(store.get('selectedCountries'));\n    selection.forEach(el => countries.add(el.value));\n    store.set('selectedCountries', Array.from(countries));\n    map.update();\n  }\n\n  const countries = [];\n  Object.keys(migrationData[2000]).forEach(key => {\n    if (key.length !== 3) return;\n    countries.push({ value: key, label: codeToName[key] });\n  });\n\n  return (<CountrySelect countries={countries} onChange={countryChange} />\n  );\n}\n"],"sourceRoot":""}