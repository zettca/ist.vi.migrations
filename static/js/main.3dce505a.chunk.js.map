{"version":3,"sources":["helpers.js","idioms/chord.js","idioms/plot.js","idioms/lines.js","idioms/map.js","components/YearSlider.js","components/CountrySelect.js","components/MigrationSwitch.js","index.js"],"names":["filterNaN","obj","res","key","isNaN","Number","createSVG","id","dims","arguments","length","undefined","width","height","margins","svg","select","append","attr","concat","left","top","chordSVG","selectedCountries","migrationData","outerRadius","innerRadius","chord","draw","data","Math","min","updateChord","update","console","log","groupNodes","groupArcs","selectAll","remove","chords","d3","padAngle","sortSubgroups","myChord","store","get","isEmigration","year","matrix","forEach","c","push","map","co","getChordMatrix","ribbon","radius","color","domain","range","arc","groups","enter","d","index","text","value","target","darker","countryOrder","source","valueOrder","_countryOrder$map","el","_countryOrder$map2","Object","slicedToArray","c1","c2","_valueOrder$map","_valueOrder$map2","v1","v2","plotSVG","svgDims","compareData","plot","margin","updatePlot","right","bottom","flatData","reduce","acc","getDomain","dataset","fn","xScale","x","nice","yScale","y","xAxis","tickFormat","yAxis","call","linesSVG","populationData","lines","pop","updateLines","countries","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","country","dataYear","migrants","err","return","loadDataset","line","curve","i","datum","mapSVG","idioms_map","topology","population","projection","scale","translate","path","zoom","scaleExtent","on","transform","features","properties","name","clicked","mouseIn","mouseOut","contextMenu","updateMap","preventDefault","Set","delete","set","Array","from","includes","add","n","colors","classed","countryID","style","marks","1995","2000","2005","2010","2015","2017","yearChange","params","YearSlider","react_default","a","createElement","padding","es","max","step","onChange","defaultValue","React","PureComponent","CountrySelect","options","this","props","sort","b","label","react_select_esm","assign","isMulti","placeholder","components","makeAnimated","onBlurResetsInput","onSelectResetsInput","onCloseResetsInput","theme","objectSpread","borderRadius","neutral0","neutral5","neutral10","neutral20","primary25","neutral50","neutral80","MigrationSwitch","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","checked","handleChange","bind","assertThisInitialized","setState","react_switch_default","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","Component","plotData","years","countryChange","selection","Promise","all","tsv","then","dataYearsList","yearData","countryData","Country","json","dataResults","_data","conversion","whrData","codeToName","countryPop","countryWHR","code3","ReactDOM","render","keys","CountrySelect_CountrySelect","getSelect","document","getElementById","MigrationSwitch_MigrationSwitch","YearSlider_YearSlider","loadEverything"],"mappings":"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","file":"static/js/main.3dce505a.chunk.js","sourcesContent":["import { select } from 'd3';\n\nexport function tryNumber(value) {\n  return Number(value) || value;\n}\n\nexport function filterNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    if (!isNaN(obj[key])) {\n      res[key] = Number(obj[key]);\n    }\n  }\n\n  return res;\n}\n\nexport function createSVG(id, dims = { width: 400, height: 400 }, margins) {\n  const svg = select(id).append('svg')\n    .attr('width', dims.width)\n    .attr('height', dims.height);\n\n  if (margins !== undefined) {\n    const group = svg.append('g')\n      .attr('class', 'main')\n      .attr('transform', `translate(${margins.left || 0},${margins.top || 0})`);\n    return group;\n  }\n\n  return svg;\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG } from '../helpers';\n\nexport default {\n  draw: drawChord,\n  update: updateChord,\n};\n\nlet chordSVG;\nlet selectedCountries;\nlet migrationData;\n\nlet outerRadius, innerRadius;\n\nfunction getChordMatrix(data) {\n  selectedCountries = store.get('selectedCountries') || ['PRT', 'DEU', 'BRA', 'ESP', 'SWE', 'ITA'];\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const matrix = [];\n\n  console.log(isEmigration);\n\n  selectedCountries.forEach(c => {\n    matrix.push(selectedCountries.map(co => isEmigration ? data[year][co][c] : data[year][c][co]));\n  });\n\n  return matrix;\n}\n\nexport function drawChord(id, width, height, data) {\n  chordSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n\n  outerRadius = Math.min(width, height) * 0.5 - 30;\n  innerRadius = outerRadius - 20;\n\n  chordSVG.attr('viewBox', [-width / 2, -height / 2, width, height]);\n\n  chordSVG.append('g')\n    .attr('class', 'nodes');\n\n  chordSVG.append('g')\n    .attr('class', 'arcs')\n    .attr('fill-opacity', 0.8);\n\n  updateChord();\n}\n\nexport function updateChord() {\n  console.log('updating chord...');\n\n  const groupNodes = chordSVG.select('.nodes');\n  const groupArcs = chordSVG.select('.arcs');\n\n  groupNodes.selectAll('.node').remove();\n  groupArcs.selectAll('.arc').remove();\n\n  const myChord = d3.chord()\n    .padAngle(0.04)\n    .sortSubgroups(d3.descending);\n\n  const chords = myChord(getChordMatrix(migrationData));\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(9))\n    .range(d3.schemeYlOrRd[9]);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  groupNodes.selectAll('g')\n    .data(chords.groups)\n    .enter().append('g')\n    .attr('class', 'node')\n    .append('path')\n    .attr('fill', d => color(d.index))\n    .attr('stroke', d => color(d.index))\n    .attr('d', arc)\n    .append('title').text(d => `${selectedCountries[d.index]}: ${d3.format('~s')(d.value)}`);\n\n  groupArcs.selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('class', 'arc')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    .attr('stroke', d => d3.rgb(color(d.target.index)).darker())\n    .append('title').text(d => {\n      const isEmigration = store.get('isEmigration');\n      const countryOrder = isEmigration ? [d.source, d.target] : [d.target, d.source];\n      const valueOrder = [d.source, d.target];\n      const [c1, c2] = countryOrder.map(el => selectedCountries[el.index]);\n      const [v1, v2] = valueOrder.map(el => d3.format('~s')(el.value));\n      return `${c1} > ${c2}: ${v1}\\n${c2} > ${c1}: ${v2}`;\n    });\n\n}\n","import * as d3 from 'd3';\nimport { createSVG } from '../helpers';\n\nexport default {\n  draw: drawPlot,\n  update: updatePlot,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet plotSVG;\nlet svgDims;\nlet compareData;\n\nexport function drawPlot(id, width, height, data) {\n  svgDims = { width, height };\n  plotSVG = createSVG(id, { width, height }, margin);\n\n  compareData = data;\n\n  updatePlot();\n}\n\nexport function updatePlot() {\n  console.log('updating plot...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  const flatData = compareData.reduce((acc, d) => acc.concat(d), []);\n  const getDomain = (dataset, fn) => [d3.min(dataset, fn), d3.max(dataset, fn)];\n\n  const xScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.x)).nice()\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.y)).nice()\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.format('d'));\n  const yAxis = d3.axisLeft(yScale)\n    .tickFormat(d3.format('~s'));\n\n  // CLEAR OLD ELEMENTS\n\n  plotSVG.selectAll('.circle').remove();\n\n  // CREATE NEW ELEMENTS\n\n  plotSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  plotSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis);\n\n  plotSVG.append('g')\n    .attr('class', 'circles')\n    .selectAll('circle')\n    .data(compareData)\n    .enter().append('circle')\n    .attr('class', 'circle')\n    .attr('cx', d => d.x)\n    .attr('cy', d => d.y)\n    .attr('r', 4);\n\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG } from '../helpers';\n\nexport default {\n  draw: drawLines,\n  update: updateLines,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet linesSVG;\nlet svgDims;\nlet migrationData;\nlet populationData;\n\nfunction loadDataset() {\n  const dataset = [];\n  const countries = store.get('selectedCountries');\n  if (!countries || countries.length === 0) return [];\n\n  const isEmigration = store.get('isEmigration');\n\n  for (let c of countries) {\n    const country = [];\n    for (let year in migrationData) {\n      const dataYear = migrationData[year];\n      if (dataYear[c] === undefined) continue; // no data\n\n      const migrants = Number(isEmigration ? dataYear['WORLD'][c] : dataYear[c]['Total']);\n      const pop = populationData[c][year] * 1000;\n      const data = migrants /*/ pop*/;\n\n      country.push({ year: Number(year), value: Number(data) });\n    }\n    dataset.push(country);\n  }\n\n  return dataset;\n}\n\nexport function drawLines(id, width, height, data, pop) {\n  svgDims = { width, height };\n  linesSVG = createSVG(id, { width, height }, margin);\n  migrationData = data;\n  populationData = pop;\n\n  updateLines();\n}\n\nexport function updateLines() {\n  console.log('updating lines...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  const dataset = loadDataset();\n\n  const flatData = dataset.reduce((acc, d) => acc.concat(d), []);\n  const getDomain = (dataset, fn) => [d3.min(dataset, fn), d3.max(dataset, fn)];\n\n  const xScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.year)).nice()\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()\n    .domain(getDomain(flatData, d => d.value)).nice()\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.format('d'));\n  const yAxis = d3.axisLeft(yScale)\n    .tickFormat(d3.format('~s'));\n\n  const line = d3.line()\n    .x(d => xScale(d.year))\n    .y(d => yScale(d.value))\n    .curve(d3.curveMonotoneX);\n\n  // CLEAR OLD ELEMENTS\n\n  linesSVG.selectAll('.dots').remove();\n  linesSVG.selectAll('.line').remove();\n  linesSVG.select('.xAxis').remove();\n  linesSVG.select('.yAxis').remove();\n\n  // CREATE NEW ELEMENTS\n\n  linesSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  linesSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis);\n\n  for (let i = 0; i < dataset.length; i++) {\n    const num = 6;\n    const color = d3.schemeRdYlGn[num][i % num];\n\n    linesSVG.append('path')\n      .datum(dataset[i])\n      .attr('stroke', color)\n      .attr('class', 'line')\n      .attr('d', line);\n\n    linesSVG.append('g')\n      .attr('class', 'dots')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .selectAll().data(dataset[i])\n      .enter().append('circle')\n      .attr('cx', (d) => xScale(d.year))\n      .attr('cy', (d) => yScale(d.value))\n      .attr('r', 5);\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG } from '../helpers';\nimport { lines, chord } from '../idioms';\n\nexport default {\n  draw: drawMap,\n  update: updateMap,\n};\n\nlet mapSVG;\nlet migrationData, populationData;\n\nfunction mouseIn() { }\n\nfunction mouseOut() { }\n\nfunction contextMenu(d) {\n  d3.event.preventDefault();\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.delete(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nfunction clicked(d) {\n  const forbidden = ['UNK', 'TWN', 'ATA'];\n  if (forbidden.includes(d.id)) return;\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.add(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nconst color = d3.scaleThreshold()\n  .domain([1, 10, 100, 250, 500, 1000, 2500, 5000, 10000].map(n => n * 1000))\n  .range(d3.schemeBlues[9]);\n\nexport function drawMap(id, width, height, topology, data, population) {\n  mapSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n  populationData = population;\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 4)\n    .translate([width / 2, height / 1.2]);\n\n  const path = d3.geoPath().projection(projection);\n  const zoom = d3.zoom()\n    .scaleExtent([0.6, 7])\n    .on('zoom', zoomed);\n\n  mapSVG.call(zoom);\n\n  const map = mapSVG.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(topology.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .on('click', clicked)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', contextMenu)\n    .append('title').text(d => `${d.id}: ${d.properties.name}`);\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n  updateMap();\n}\n\nexport function updateMap() {\n  console.log('updating map...');\n\n  const selectedCountries = store.get('selectedCountries') || [];\n  const num = 6;\n  const colors = d3.schemeRdYlGn[num];\n\n  d3.selectAll('.selected').classed('selected', false);\n  selectedCountries.forEach((countryID, i) => {\n    d3.select('path#' + countryID)\n      .style('fill', colors[i % num])\n      .classed('selected', true);\n  });\n\n  const year = store.get('year') || 2010;\n  const isEmigration = store.get('isEmigration');\n\n  mapSVG.selectAll('path:not(.selected)')\n    //.transition().duration(600)\n    .style('fill', (d) => {\n      const dataYear = migrationData[year];\n      if (dataYear[d.id] === undefined) return 'black'; // no data\n      const migrants = Number(isEmigration ? dataYear['WORLD'][d.id] : dataYear[d.id]['Total']);\n      const pop = populationData[d.id][year] * 1000;\n      return color(migrants);\n    });\n\n  lines.update();\n  chord.update();\n}\n","import React from 'react';\nimport store from 'store';\nimport Slider from 'rc-slider';\nimport { map } from '../idioms';\n\nimport 'rc-slider/assets/index.css';\n\nconst marks = {\n  1995: '1995',\n  2000: '2000',\n  2005: '2005',\n  2010: '2010',\n  2015: '2015',\n  2017: '2017',\n};\n\nfunction yearChange(params) {\n  console.log(params);\n  store.set('year', params);\n  map.update();\n}\n\nexport default class YearSlider extends React.PureComponent {\n  render() {\n    const style = { padding: '0.6em 2em 0' };\n\n    return (\n      <div style={style}>\n        <Slider\n          min={1995}\n          max={2017}\n          marks={marks}\n          step={null}\n          onChange={yearChange}\n          defaultValue={2010} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nexport default class CountrySelect extends React.PureComponent {\n  render() {\n    const { countries } = this.props;\n    const options = countries.sort((a, b) => a.label < b.label ? -1 : 1);\n\n    return (\n      <Select isMulti\n        placeholder={'Select countries...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        {...this.props}\n      />);\n  }\n}\n","import React from 'react';\nimport store from 'store';\nimport Switch from 'react-switch';\n\nimport { lines, map, chord } from '../idioms';\n\nexport default class MigrationSwitch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(checked) {\n    store.set('isEmigration', checked);\n    this.setState({ checked });\n\n    map.update();\n    lines.update();\n    chord.update();\n  }\n\n  render() {\n    const { checked } = this.state;\n\n    return (\n      <div>\n        <Switch\n          onChange={this.handleChange}\n          checked={checked}\n          onColor=\"#86d3ff\"\n          onHandleColor=\"#2693e6\"\n          handleDiameter={24}\n          uncheckedIcon={false}\n          checkedIcon={false}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n          height={16}\n          width={64}\n          id={'mySwitcherino'}\n        />\n        <span>{checked ? 'Emigration' : 'Immigration'}</span>\n      </div>\n    );\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { tsv, json } from 'd3-fetch';\n\nimport YearSlider from './components/YearSlider';\nimport CountrySelect from './components/CountrySelect';\nimport MigrationSwitch from './components/MigrationSwitch';\nimport { chord, plot, lines, map } from './idioms';\nimport { filterNaN } from './helpers';\n\nimport './index.css';\nimport './idioms.css';\n\n// STARTUP\n\nstore.remove('selectedCountries');\nstore.remove('isEmigration');\n\nstore.set('selectedCountries', ['PRT', 'SWE', 'UKR']);\n\n// STATIC TEST DATA\n\nconst plotData = [\n  { x: 21, y: 110 },\n  { x: 22.8, y: 93 },\n  { x: 18.7, y: 175 },\n  { x: 14.3, y: 245 },\n  { x: 24.4, y: 62 },\n  { x: 14.7, y: 230 },\n  { x: 32.4, y: 66 },\n  { x: 30.4, y: 52 },\n  { x: 33.9, y: 65 },\n  { x: 15.5, y: 150 },\n  { x: 15.2, y: 150 },\n  { x: 13.3, y: 245 },\n  { x: 19.2, y: 175 },\n  { x: 27.3, y: 66 },\n  { x: 26, y: 91 },\n  { x: 30.4, y: 113 },\n  { x: 15.8, y: 264 },\n  { x: 19.7, y: 175 },\n  { x: 15, y: 335 },\n  { x: 21.4, y: 109 }\n];\n\n// DYNAMIC REAL DATA\n\nconst years = [1990, 1995, 2000, 2005, 2010, 2015, 2017];\nPromise.all(years.map(year => tsv(`./data/migration/${year}.tsv`)))\n  .then(dataYearsList => {\n    const migrationData = {};\n    dataYearsList.forEach((yearData, i) => {\n      migrationData[years[i]] = {};\n      yearData.forEach(countryData => migrationData[years[i]][countryData.Country] = filterNaN(countryData));\n    });\n\n    console.log(migrationData);\n\n    Promise.all([\n      json('./data/topology.json'),\n      tsv('./data/conversion.tsv'),\n      tsv('./data/population.tsv'),\n      tsv('./data/whr2017.tsv'),\n    ]).then((dataResults) => {\n      loadEverything(dataResults, migrationData);\n    });\n  });\n\nfunction loadEverything(data, migrationData) {\n  const [topology, conversion, population, whrData] = data;\n\n  const codeToName = {};\n  const countryPop = {};\n  const countryWHR = {};\n  population.forEach((c) => countryPop[c.Country] = filterNaN(c));\n  whrData.forEach((c) => countryWHR[c.country] = filterNaN(c));\n  conversion.forEach(c => codeToName[c.code3] = c.name);\n  store.set('codeToName', codeToName);\n\n  // order is important, sadly\n  chord.draw('#chord', 600, 420, migrationData);\n  plot.draw('#plot', 600, 420, plotData);\n  lines.draw('#lines', 1000, 420, migrationData, countryPop);\n  map.draw('#map', 1000, 420, topology, migrationData, countryPop);\n\n  ReactDOM.render(getSelect(migrationData, codeToName), document.getElementById('countrySelect'));\n  ReactDOM.render(<MigrationSwitch />, document.getElementById('migrationSwitch'));\n  ReactDOM.render(<YearSlider />, document.getElementById('yearSlider'));\n}\n\nfunction getSelect(data, codeToName, value) {\n  const countries = [];\n  Object.keys(data[2000]).forEach(key => {\n    if (key.length === 3) {\n      countries.push({ value: key, label: codeToName[key], /*group: c.region*/ });\n    }\n  });\n\n  return (\n    <CountrySelect\n      value={value}\n      countries={countries}\n      onChange={countryChange} />\n  );\n}\n\nfunction countryChange(selection) {\n  const countries = new Set(store.get('selectedCountries'));\n  selection.forEach(el => countries.add(el.value));\n  store.set('selectedCountries', Array.from(countries));\n  map.update();\n}\n"],"sourceRoot":""}