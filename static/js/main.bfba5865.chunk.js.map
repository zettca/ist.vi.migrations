{"version":3,"sources":["helpers.js","idioms.js","index.js"],"names":["makeSVG","id","width","height","select","append","attr","idioms","drawMap","data","population","svg","countryPop","forEach","d","color","d3","domain","map","n","range","projection","scale","translate","path","zoom","scaleExtent","on","selectAll","transform","call","features","enter","properties","name","style","classed","this","console","log","drawPlot","drawChord","outerRadius","Math","min","innerRadius","chords","chordData","ribbon","radius","formatValue","arc","group","groups","index","darker","groupTick","step","k","endAngle","startAngle","value","angle","groupTicks","concat","PI","filter","text","target","drawLines","Promise","all","json","tsv","then","dataResults","_dataResults","Object","slicedToArray","countries"],"mappings":"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","file":"static/js/main.bfba5865.chunk.js","sourcesContent":["import { select } from 'd3';\n\nexport function makeSVG(id, width, height) {\n  return select(id).append('svg')\n    .attr('width', width)\n    .attr('height', height);\n}\n","import * as d3 from 'd3';\nimport { makeSVG } from './helpers';\n\nexport default {\n  drawMap: drawMap,\n  drawPlot: drawPlot,\n  drawChord: drawChord,\n  drawLines: drawLines,\n};\n\nconst chordData = [\n  [19, 11, 19, 14, 15, 14, 13, 17],\n  [5, 9, 5, 13, 0, 16, 2, 9],\n  [12, 18, 12, 2, 1, 6, 13, 8],\n  [11, 12, 18, 5, 19, 6, 16, 18],\n  [19, 20, 17, 7, 16, 5, 9, 12],\n  [13, 18, 15, 6, 12, 14, 11, 7],\n  [10, 5, 0, 19, 18, 1, 1, 5],\n  [20, 10, 7, 7, 13, 6, 1, 20]];\n\nexport function drawPlot(id, width, height, data) {\n  return undefined;\n}\n\nexport function drawLines(id, width, height, data) {\n  return undefined;\n}\n\nexport function drawMap(id, width, height, data, population) {\n  const svg = makeSVG(id, width, height);\n  const countryPop = {};\n\n  population.forEach((d) => countryPop[d.id] = +d.population);\n\n  const color = d3.scaleThreshold()\n    .domain([10, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1500000].map(n => n * 1000))\n    .range(['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b', '#03132b']);\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 3)\n    .translate([width / 2, height / 1.2]);\n\n  const path = d3.geoPath().projection(projection);\n\n  const zoom = d3.zoom()\n    .scaleExtent([1, 6])\n    .on('zoom', zoomed);\n\n  svg.call(zoom);\n\n  const map = svg.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(data.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .style('fill', (d) => color(countryPop[d.id]))\n    .on('click', selected)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', test);\n\n  function selected(d) {\n    d3.select('.selected').classed('selected', false);\n    d3.select(this).classed('selected', true);\n  }\n\n  function mouseIn(d) {\n\n  }\n\n  function mouseOut(d) {\n\n  }\n\n  function test(d) {\n    console.log('right clicked...');\n  }\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n}\n\nexport function drawChord(id, width, height, data) {\n  const svg = makeSVG(id, width, height);\n\n  function groupTicks(d, step) {\n    const k = (d.endAngle - d.startAngle) / d.value;\n    return d3.range(0, d.value, step).map(value => {\n      return { value: value, angle: value * k + d.startAngle };\n    });\n  }\n\n  const\n    outerRadius = Math.min(width, height) * 0.5 - 30,\n    innerRadius = outerRadius - 20;\n\n  svg\n    .attr('viewBox', [-width / 2, -height / 2, width, height])\n    .attr('font-size', 10)\n    .attr('font-family', 'sans-serif');\n\n  const chords = d3.chord(chordData);\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const formatValue = d3.formatPrefix(',.0', 1e3);\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(4))\n    .range(['#000000', '#FFDD89', '#957244', '#F26223']);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  const group = svg.append('g').selectAll('g').data(chords.groups).enter().append('g');\n\n  group.append('path')\n    .attr('fill', d => color(d.index))\n    .attr('stroke', d => d3.rgb(color(d.index)).darker())\n    .attr('d', arc);\n\n  const groupTick = group.append('g')\n    .selectAll('g')\n    .data(d => groupTicks(d, 1e3))\n    .enter().append('g')\n    .attr('transform', d => `rotate(${d.angle * 180 / Math.PI - 90}) translate(${outerRadius},0)`);\n\n  groupTick.append('line')\n    .attr('stroke', '#000')\n    .attr('x2', 6);\n\n  groupTick\n    .filter(d => d.value % 5e3 === 0)\n    .append('text')\n    .attr('x', 8)\n    .attr('dy', '.35em')\n    .attr('transform', d => d.angle > Math.PI ? 'rotate(180) translate(-16)' : null)\n    .attr('text-anchor', d => d.angle > Math.PI ? 'end' : null)\n    .text(d => formatValue(d.value));\n\n  svg.append('g')\n    .attr('fill-opacity', 0.67)\n    .selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    .attr('stroke', d => d3.rgb(color(d.target.index)).darker());\n\n}\n","/*\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nReactDOM.render(<App />, document.getElementById('root'));\n*/\n\nimport { tsv, json } from 'd3-fetch';\nimport idioms from './idioms';\nimport './index.css';\nimport './idioms.css';\n\n// FETCH DATA AND DRAW\n\nPromise.all([\n  json('./data/countries.json'),\n  tsv('./data/population.tsv'),\n]).then((dataResults) => {\n  const [countries, population] = dataResults;\n  idioms.drawPlot('#plot', 600, 400);\n  idioms.drawLines('#lines', 600, 400);\n  idioms.drawMap('#map', 800, 400, countries, population);\n  // idioms.drawChord(svgChord);\n});\n\n// UPDATE DATA HANDLERS\n"],"sourceRoot":""}