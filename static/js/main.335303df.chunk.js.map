{"version":3,"sources":["helpers.js","idioms/chord.js","idioms/graph.js","idioms/map.js","components/YearSlider.js","components/EventSelect.js","components/CountrySelect.js","components/MigrationSwitch.js","index.js"],"names":["numColors","colors","map","d3","selection","slice","getMigration","dataYear","country","store","get","countryName","code","filterNaN","obj","res","key","num","Number","isNaN","byId","id","document","getElementById","createSVG","dims","arguments","length","undefined","width","height","margins","svg","append","attr","concat","left","top","chordSVG","countries","migrationData","outerRadius","innerRadius","chord","draw","data","el","querySelector","_ref","clientWidth","clientHeight","Math","min","updateChord","update","getChordMatrix","isEmigration","year","matrix","forEach","c","push","c2","val","error","getValue","console","log","groupNodes","select","groupArcs","selectAll","remove","chords","padAngle","myChord","ribbon","radius","color","domain","range","arc","groups","enter","d","i","on","s","classed","p","source","index","target","text","value","countryOrder","valueOrder","_countryOrder$map","_countryOrder$map2","Object","slicedToArray","c1","_valueOrder$map","_valueOrder$map2","v1","v2","makeTitle","graphSVG","svgDims","selectedCountries","compareData","populationData","graph","whrData","pop","margin","updateGraph","right","bottom","metrics","loadCompareDataset","dataset","entry","parseNaN","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","migrants","err","return","loadDataset","compareDataset","flatData","values","reduce","acc","axisDomain","fn","yearScale","nice","migrantsScale","metricsScale","metric","xAxis","tickFormat","yAxis1","line","x","y","curve","call","ms","countriesGroup","_loop","countryData","coName","countryGroup","datum","g","preventDefault","metricsGroup","met","defined","metricGroup","mapSVG","idioms_map","topology","population","projection","scale","translate","path","zoom","scaleExtent","transform","features","properties","name","clickLeft","mouseIn","mouseOut","clickRight","updateMap","Set","delete","set","Array","from","includes","add","getMigrants","style","countryID","marks","1995","2000","2005","2010","2015","2017","yearChange","params","YearSlider","react_default","a","createElement","padding","es","max","included","step","onChange","defaultValue","handleStyle","border","backgroundColor","React","PureComponent","EventSelect","events","this","props","options","event","label","react_select_esm","assign","_events$selection$val","countriesList","split","placeholder","components","makeAnimated","onBlurResetsInput","onSelectResetsInput","onCloseResetsInput","theme","objectSpread","borderRadius","neutral0","neutral5","neutral10","neutral20","primary25","neutral50","neutral80","CountrySelect","codeToName","keys","sort","b","isMulti","action","clear","option","removedValue","MigrationSwitch","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","checked","handleChange","bind","assertThisInitialized","setState","react_switch_default","onColor","offColor","onHandleColor","offHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","Component","filesPromise","json","tsv","Promise","all","then","dataResults","_data","conversion","migrationDiff","previousYear","dataYears","indexOf","thisValue","prevValue","getMigrationDiff","countryPop","countryWHR","Country","code3","ReactDOM","render","CountrySelect_CountrySelect","EventSelect_EventSelect","MigrationSwitch_MigrationSwitch","YearSlider_YearSlider","handleData"],"mappings":"qUAOO,IAAMA,EAAY,EAEZC,EAAS,CACpBC,IAAKC,IAAeH,GACpBI,UAAWD,IAAgBE,MAAM,IAG5B,SAASC,EAAaC,EAAUC,GAErC,OADqBC,IAAMC,IAAI,gBACTH,EAAQ,MAAUC,GAAWD,EAASC,GAAT,MAG9C,SAASG,EAAYC,GAE1B,OADmBH,IAAMC,IAAI,cACXE,GAGb,SAASC,EAAUC,GACxB,IAAMC,EAAM,GAEZ,IAAK,IAAMC,KAAOF,EAAK,CACrB,IAAMG,EAAMC,OAAOJ,EAAIE,IAClBG,MAAMF,IAAgB,IAARA,IACjBF,EAAIC,GAAOC,GAIf,OAAOF,EAcF,SAASK,EAAKC,GACnB,OAAOC,SAASC,eAAeF,GAG1B,SAASG,EAAUH,GAAiD,IAA7CI,EAA6CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtC,CAAEG,MAAO,IAAKC,OAAQ,KAAOC,EAASL,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnEI,EAAM7B,IAAUkB,GAAIY,OAAO,OAC9BC,KAAK,QAAST,EAAKI,OACnBK,KAAK,SAAUT,EAAKK,QAEvB,YAAgBF,IAAZG,EACYC,EAAIC,OAAO,KACtBC,KAAK,QAAS,QACdA,KAAK,YAFM,aAAAC,OAEoBJ,EAAQK,MAAQ,EAFpC,KAAAD,OAEyCJ,EAAQM,KAAO,EAFxD,MAMTL,EC5DT,IAKIM,EACAC,EAAWC,EAEXC,EAAaC,EARjBC,EAAA,CACEC,KAkCK,SAAmBvB,EAAIwB,GAC5B,IAAMC,EAAKxB,SAASyB,cAAc1B,GADA2B,EAEV,CAACF,EAAGG,YAAaH,EAAGI,cAArCrB,EAF2BmB,EAAA,GAEpBlB,EAFoBkB,EAAA,GAIlCV,EAAWd,EAAUH,EAAI,CAAEQ,QAAOC,WAClCW,EAAwC,GAA1BU,KAAKC,IAAIvB,EAAOC,GAC9BY,EAAcD,EAAc,GAE5BD,EAAgBK,EAEhBP,EAASJ,KAAK,UAAW,EAAEL,EAAQ,GAAIC,EAAS,EAAGD,EAAOC,IAC1DQ,EAASL,OAAO,KAAKC,KAAK,QAAS,SACnCI,EAASL,OAAO,KAAKC,KAAK,QAAS,QAEnCmB,KA/CAC,OAAQD,GAQV,SAASE,IACPhB,EAAY9B,IAAMC,IAAI,qBAGtB,IAAM8C,EAAe/C,IAAMC,IAAI,gBACzB+C,EAAOhD,IAAMC,IAAI,SAAW,KAC5BgD,EAAS,GAgBf,OAJAnB,EAAUoB,QAAQ,SAAAC,GAChBF,EAAOG,KAAKtB,EAAUrC,IAAI,SAAA4D,GAAE,OAX9B,SAAkBF,EAAGE,GACnB,IAAIC,EACJ,IACEA,EAAMP,EAAehB,EAAciB,GAAMK,GAAIF,GAAKpB,EAAciB,GAAMG,GAAGE,GACzE,MAAOE,GACPD,EAAM,EAER,OAAOA,GAAO,EAIkBE,CAASL,EAAGE,QAGvCJ,EAoBF,SAASL,IACda,QAAQC,IAAI,qBAEZ,IAAMC,EAAa9B,EAAS+B,OAAO,UAC7BC,EAAYhC,EAAS+B,OAAO,SAElCD,EAAWG,UAAU,SAASC,SAC9BF,EAAUC,UAAU,QAAQC,SAE5B,IAEMC,EAFUtE,MAAWuE,SAAS,IAErBC,CAAQpB,KACjBqB,EAASzE,MAAY0E,OAAOnC,GAE5BoC,EAAQ3E,MACX4E,OAAO5E,IAAS,IAChB6E,MAAM/E,EAAOG,WAEV6E,EAAM9E,MACTuC,YAAYA,GACZD,YAAYA,GAEf2B,EAAWG,UAAU,KAClB1B,KAAK4B,EAAOS,QACZC,QAAQlD,OAAO,KACfC,KAAK,QAAS,QACdD,OAAO,QACPC,KAAK,OAAQ,SAACkD,EAAGC,GAAJ,OAAUP,EAAMO,KAC7BnD,KAAK,SAAU,SAACkD,EAAGC,GAAJ,OAAUP,EAAMO,KAC/BnD,KAAK,IAAK+C,GACVK,GAAG,YAsBN,SAAmBF,EAAGC,GAEpB,IAAME,EAAIjB,EAAUC,UAAU,QAC9BgB,EAAEC,QAAQ,OAAQ,SAACC,GAAD,OAAOA,EAAEC,OAAOC,QAAUN,GAAKI,EAAEG,OAAOD,QAAUN,IACpEE,EAAEC,QAAQ,OAAQ,SAACC,GAAD,OAAOA,EAAEC,OAAOC,QAAUN,MAzB3CC,GAAG,WA4BN,SAAkBF,EAAGC,GACnBf,EAAUC,UAAU,aAAaiB,QAAQ,QAAQ,GACjDlB,EAAUC,UAAU,aAAaiB,QAAQ,QAAQ,KA7BhDvD,OAAO,SAAS4D,KAAK,SAAAT,GAAC,SAAAjD,OAAOxB,EAAY4B,EAAU6C,EAAEO,QAA/B,MAAAxD,OAA2ChC,IAAU,KAAVA,CAAgBiF,EAAEU,UAEtFxB,EAAUC,UAAU,QACjB1B,KAAK4B,GACLU,QAAQlD,OAAO,QACfC,KAAK,QAAS,OACdA,KAAK,IAAK0C,GACV1C,KAAK,OAAQ,SAAAkD,GAAC,OAAIN,EAAMM,EAAEQ,OAAOD,SAEjC1D,OAAO,SAAS4D,KAAK,SAAAT,GAAC,OAEzB,SAAmBA,GACjB,IACMW,EADetF,IAAMC,IAAI,gBACK,CAAC0E,EAAEM,OAAQN,EAAEQ,QAAU,CAACR,EAAEQ,OAAQR,EAAEM,QAClEM,EAAa,CAACZ,EAAEM,OAAQN,EAAEQ,QAHZK,EAIHF,EAAa7F,IAAI,SAAA4C,GAAE,OAAInC,EAAY4B,EAAUO,EAAG6C,UAJ7CO,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAIbI,EAJaH,EAAA,GAITpC,EAJSoC,EAAA,GAAAI,EAKHN,EAAW9F,IAAI,SAAA4C,GAAE,OAAI3C,IAAU,KAAVA,CAAgB2C,EAAGgD,SALrCS,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAKbE,EALaD,EAAA,GAKTE,EALSF,EAAA,GAMpB,SAAApE,OAAUkE,EAAV,OAAAlE,OAAkB2B,EAAlB,MAAA3B,OAAyBqE,EAAzB,MAAArE,OAAgC2B,EAAhC,OAAA3B,OAAwCkE,EAAxC,MAAAlE,OAA+CsE,GARpBC,CAAUtB,KC7F1B,IAOXuB,EACAC,EACAC,EACAC,EAAatE,EAAeuE,EAVjBC,EAAA,CACbpE,KAqDK,SAAmBvB,EAAIwB,EAAMoE,EAASC,GAC3C,IAAMpE,EAAKxB,SAASyB,cAAc1B,GAClCuF,EAAU,CAAE/E,MAAOiB,EAAGG,YAAanB,OAAQgB,EAAGI,cAE9CyD,EAAWnF,EAAUH,EAAIuF,EAASO,GAClC3E,EAAgBK,EAChBkE,EAAiBG,EACjBJ,EAAcG,EAEdG,KA7DA9D,OAAQ8D,GAGJD,EAAS,CAAE9E,IAAK,GAAIgF,MAAO,GAAIC,OAAQ,GAAIlF,KAAM,IAOjDmF,EAAU,CACd,iBACA,iBACA,0BACA,+BACA,6BA0BF,SAASC,IACP,IAAMC,EAAU,GAOhB,OANAX,EAAYnD,QAAQ,SAAA+D,QACa9F,IAA3B6F,EAAQC,EAAMlH,WAChBiH,EAAQC,EAAMlH,SAAW,IAE3BiH,EAAQC,EAAMlH,SAASqD,KFhBpB,SAAkB/C,GACvB,IAAMC,EAAM,GAEZ,IAAK,IAAMC,KAAOF,EAAK,CACrB,IAAMG,EAAMC,OAAOJ,EAAIE,IACvBD,EAAIC,GAAOC,GAAOH,EAAIE,GAGxB,OAAOD,EEQuB4G,CAASD,MAEhCD,EAeF,SAASL,IACdlD,QAAQC,IAAI,qBAEZ,IACEtC,EAAQ+E,EAAQ/E,MAAQsF,EAAO/E,KAAO+E,EAAOE,MAC7CvF,EAAS8E,EAAQ9E,OAASqF,EAAO9E,IAAM8E,EAAOG,OAEhDT,EAAoBpG,IAAMC,IAAI,qBAE9B,IAAM+G,EAtDR,WACE,IAAMA,EAAU,GAChB,IAAKZ,GAAkD,IAA7BA,EAAkBlF,OAAc,MAAO,GAF5C,IAAAiG,GAAA,EAAAC,GAAA,EAAAC,OAAAlG,EAAA,IAIrB,QAAAmG,EAAAC,EAAcnB,EAAdoB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAiC,KAAxBhE,EAAwBmE,EAAAjC,MACzBtF,EAAU,GAChB,IAAK,IAAIiD,KAAQjB,EAAe,CAC9B,IAAMjC,EAAWiC,EAAciB,GAC/B,QAAoB7B,IAAhBrB,EAASqD,GAAb,CAEA,IAAMyE,EAAWnH,OAAOZ,EAAaC,EAAUqD,IAEzCf,GADMkE,EAAenD,GAAGH,GACjB4E,GAEb7H,EAAQqD,KAAK,CAAEJ,KAAMvC,OAAOuC,GAAOqC,MAAO5E,OAAO2B,MAEnD4E,EAAQ7D,GAAKpD,GAhBM,MAAA8H,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAmBrB,OAAOL,EAmCSe,GACVC,EAAiBjB,IAEjBkB,EAAWvC,OAAOwC,OAAOlB,GAASmB,OAAO,SAACC,EAAKzD,GAAN,OAAYyD,EAAI1G,OAAOiD,IAAI,IAEpE0D,EAAa,SAACjG,EAAMkG,GAAP,MAAc,CAAC5I,IAAO0C,EAAMkG,GAAK5I,IAAO0C,EAAMkG,KAE3DC,EAAY7I,MACf4E,OAAO+D,EAAWJ,EAAU,SAAAtD,GAAC,OAAIA,EAAE3B,QAAOwF,OAC1CjE,MAAM,CAAC,EAAGnD,IAEPqH,EAAgB/I,MACnB4E,OAAO+D,EAAWJ,EAAU,SAAAtD,GAAC,OAAIA,EAAEU,SAAQmD,OAC3CjE,MAAM,CAAClD,EAAQ,IAGZqH,EAAe5B,EAAQrH,IAAI,SAAAkJ,GAAM,OACrCjJ,MACG4E,OAAO+D,EAAWhC,EAAa,SAAA1B,GAAC,OAAKA,EAAEgE,MAAUH,OACjDjE,MAAM,CAAClD,EAAQ,MAEduH,EAAQlJ,IAAc6I,GAAWM,WAAWnJ,IAAU,MACtDoJ,EAASpJ,IAAY+I,GAAeI,WAAWnJ,IAAU,OAGzDqJ,EAAOrJ,MACVsJ,EAAE,SAAArE,GAAC,OAAI4D,EAAU5D,EAAE3B,QACnBiG,EAAE,SAAAtE,GAAC,OAAI8D,EAAc9D,EAAEU,SACvB6D,MAAMxJ,KAITwG,EAASpC,UAAU,YAAYC,SAC/BmC,EAASpC,UAAU,UAAUC,SAC7BmC,EAASpC,UAAU,UAAUC,SAI7BmC,EAAS1E,OAAO,KACbC,KAAK,QAAS,SACdA,KAAK,YAFR,eAAAC,OAEoCL,EAFpC,MAGG8H,KAAKP,GAER1C,EAAS1E,OAAO,KACbC,KAAK,QAAS,SACd0H,KAAKL,GAOR,IAAMM,EAAKpJ,IAAMC,IAAI,gBAAkB,aAAe,cAEhDoJ,EAAiBnD,EAAS1E,OAAO,KACpCC,KAAK,QAAS,aAiBjB,IAAImD,EAAI,EAjFoB0E,EAAA,SAkFjBvJ,GACT,IAAMwJ,EAAcvC,EAAQjH,GACtBsE,EAAQ7E,EAAOG,UAAUiF,IAAMrF,GAC/BiK,EAAStJ,EAAYH,GAE3B,IAAKwJ,EAAa,cAElB,IAAME,EAAeJ,EAAe7H,OAAO,KACxCC,KAAK,KAAM1B,GACX0B,KAAK,QAAS,WACdA,KAAK,OAAQ+H,GA0BhB,GAxBAC,EAAajI,OAAO,QACjBkI,MAAMH,GACN9H,KAAK,QAAS,QACdA,KAAK,SAAU4C,GACf5C,KAAK,IAAKsH,GACVlE,GAAG,QAAS,kBAjCI8E,EAiCcF,EAhCjCJ,EAAe5H,KAAK,aAAc,UAClCkI,EAAElI,KAAK,aAAc,WACrBkI,EAAE7F,UAAU,aAAaiB,QAAQ,YAAY,QAC7C4E,EAAE7F,UAAU,YAAYiB,QAAQ,YAAY,GAJ9C,IAAqB4E,IAkChB9E,GAAG,cAAe,kBA3BF8E,EA2BoBF,EA1BvC/J,IAASkK,iBACTP,EAAe5H,KAAK,aAAc,WAClCkI,EAAElI,KAAK,aAAc,MACrBkI,EAAE7F,UAAU,aAAaiB,QAAQ,YAAY,QAC7C4E,EAAE7F,UAAU,YAAYrC,KAAK,aAAc,UAL7C,IAAqBkI,IA4BhB9E,GAAG,aAAc,kBAAM4E,EAAa3F,UAAU,YAAYrC,KAAK,aAAc,aAC7EoD,GAAG,WAAY,kBAAM4E,EAAa3F,UAAU,YAAYrC,KAAK,aAAc,YAC3ED,OAAO,SAAS4D,KAAK,oBAAA1D,OAAS8H,EAAT,KAAA9H,OAAmB0H,EAAnB,WAExBK,EAAajI,OAAO,KACjBC,KAAK,QAAS,QACdA,KAAK,OAAQ4C,GACb5C,KAAK,SAAU4C,GACfP,YAAY1B,KAAKmH,GACjB7E,QAAQlD,OAAO,UACfC,KAAK,KAAM,SAACkD,GAAD,OAAO4D,EAAU5D,EAAE3B,QAC9BvB,KAAK,KAAM,SAACkD,GAAD,OAAO8D,EAAc9D,EAAEU,SAClC5D,KAAK,IAAK,GACVD,OAAO,SAAS4D,KAAK,SAAAT,GAAC,SAAAjD,OAAO8H,EAAP,MAAA9H,OAAkBiD,EAAE3B,KAApB,OAAAtB,OAA8BhC,IAAU,KAAVA,CAAgBiF,EAAEU,WAIpE2C,EAAejI,GAAU,cAE9B,IAAM8J,EAAeJ,EAAajI,OAAO,KACtCC,KAAK,QAAS,WACdA,KAAK,aAAc,UAEtBqF,EAAQ5D,QAAQ,SAAC4G,EAAKlF,GACpB,IAAMP,EAAQ3E,IAAsBkF,EAAIkC,EAAQ5F,QAE1C6H,EAAOrJ,MACVsJ,EAAE,SAAArE,GAAC,OAAI4D,EAAU5D,EAAE3B,QACnBiG,EAAE,SAAAtE,GAAC,OAAI+D,EAAa9D,GAAGD,EAAEmF,MACzBC,QAAQ,SAAApF,GAAC,OAAIA,EAAEmF,KACfZ,MAAMxJ,KAEHsK,EAAcH,EAAarI,OAAO,KACrCC,KAAK,QAAS,UAEjBuI,EAAYxI,OAAO,QAChBkI,MAAM1B,EAAejI,IACrB0B,KAAK,SAAU4C,GACf5C,KAAK,OAAQ,QACbA,KAAK,UAAW,IAChBA,KAAK,IAAKsH,GACVvH,OAAO,SAAS4D,KAAK,kBAAM0E,IAE9BE,EAAYxI,OAAO,KAChBC,KAAK,OAAQ4C,GACb5C,KAAK,SAAU4C,GACfP,UAAU,UACV1B,KAAK4F,EAAejI,IACpB2E,QAAQlD,OAAO,UACfC,KAAK,QAAS,UACdA,KAAK,KAAM,SAAAkD,GAAC,OAAI4D,EAAU5D,EAAE3B,QAC5BvB,KAAK,KAAM,SAAAkD,GAAC,OAAI+D,EAAa9D,GAAGD,EAAEmF,MAClCrI,KAAK,IAAK,SAAAkD,GAAC,MAAe,KAAXA,EAAEmF,GAAc,EAAI,IACnCtI,OAAO,SAAS4D,KAAK,SAAAT,GAAC,SAAAjD,OAAO8H,EAAP,MAAA9H,OAAkBiD,EAAE3B,KAApB,OAAAtB,OAA8BiD,EAAEmF,GAAhC,KAAApI,OAAwCoI,QAxErE,IAAK,IAAM/J,KAAWiH,EAAS,cAAAsC,EAApBvJ,GAoCqB,OCvLnB,IAKXkK,EACAlI,EAAeuE,EANJ4D,EAAA,CACb/H,KAkCK,SAAiBvB,EAAIuJ,EAAU/H,EAAMgI,GAC1C,IAAM/H,EAAKxB,SAASyB,cAAc1B,GADoB2B,EAE9B,CAACF,EAAGG,YAAaH,EAAGI,cAArCrB,EAF+CmB,EAAA,GAExClB,EAFwCkB,EAAA,GAItD0H,EAASlJ,EAAUH,EAAI,CAAEQ,QAAOC,WAEhCU,EAAgBK,EAChBkE,EAAiB8D,EAEjB,IAAMC,EAAa3K,MAChB4K,MAAMlJ,EAAQ,GACdmJ,UAAU,CAACnJ,EAAQ,EAAGC,EAAS,KAE5BmJ,EAAO9K,MAAa2K,WAAWA,GAC/BI,EAAO/K,MACVgL,YAAY,CAAC,GAAK,IAClB7F,GAAG,OAkBN,WACEpF,EAAIqE,UAAU,QACXrC,KAAK,YAAa/B,IAASiL,aAlBhCV,EAAOd,KAAKsB,GAEZ,IAAMhL,EAAMwK,EAAOzI,OAAO,KAAKC,KAAK,QAAS,aAC7ChC,EACGqE,UAAU,QACV1B,KAAK+H,EAASS,UACdlG,QAAQlD,OAAO,QACfC,KAAK,KAAM,SAACkD,GAAD,OAAOA,EAAE/D,KACpBa,KAAK,OAAQ,SAACkD,GAAD,OAAOA,EAAEkG,WAAWC,OACjCrJ,KAAK,IAAK+I,GACV3F,GAAG,QAASkG,GACZlG,GAAG,YAAamG,GAChBnG,GAAG,WAAYoG,GACfpG,GAAG,cAAeqG,GAClB1J,OAAO,SAAS4D,KAAK,SAAAT,GAAC,SAAAjD,OAAOiD,EAAE/D,GAAT,MAAAc,OAAgBiD,EAAEkG,WAAWC,QAOtDK,KAxEAtI,OAAQsI,GAMV,SAASH,KAET,SAASC,KAET,SAASC,EAAWvG,GAClBjF,IAASkK,iBAET,IAAMxD,EAAoB,IAAIgF,IAAIpL,IAAMC,IAAI,sBAC5CmG,EAAkBiF,OAAO1G,EAAE/D,IAC3BZ,IAAMsL,IAAI,oBAAqBC,MAAMC,KAAKpF,IAE1C+E,IAGF,SAASJ,EAAUpG,GAEjB,IADkB,CAAC,MAAO,MAAO,OACnB8G,SAAS9G,EAAE/D,IAAzB,CAEA,IAAMwF,EAAoB,IAAIgF,IAAIpL,IAAMC,IAAI,sBAC5CmG,EAAkBsF,IAAI/G,EAAE/D,IACxBZ,IAAMsL,IAAI,oBAAqBC,MAAMC,KAAKpF,IAE1C+E,KA+CK,SAASA,IACd1H,QAAQC,IAAI,mBAEZ,IAAM0C,EAAoBpG,IAAMC,IAAI,sBAAwB,GACtD+C,EAAOhD,IAAMC,IAAI,SAAW,KAC5BH,EAAWiC,EAAciB,GAE/B,SAAS2I,EAAYhH,GACnB,YAAuBxD,IAAnBrB,EAAS6E,EAAE/D,IAA0B,EACxBf,EAAaC,EAAU6E,EAAE/D,IAC9B0F,EAAe3B,EAAE/D,IAAIoC,IAER,EAG3B,IAAMqB,EAAQ3E,MACX4E,OAAO,EAAE,IAAK,IAAK,GAAI,IAAK,EAAG,IAAK,EAAG,GAAI,KAC3CC,MAAM/E,EAAOC,KAEhBwK,EAAOnG,UAAU,QAEd8H,MAAM,OAAQ,SAACjH,GAAD,OAAON,EAAMsH,EAAYhH,MACvCf,OAAO,SAASwB,KAAK,SAAAT,GAAC,SAAAjD,OAClBxB,EAAYyE,EAAE/D,IADI,MAAAc,OACIhC,IAAU,MAAVA,CAAiBiM,EAAYhH,IADjC,sBAIzBjF,IAAa,aAAaqF,QAAQ,YAAY,GAC9CqB,EAAkBlD,QAAQ,SAAC2I,EAAWjH,GACpClF,IAAU,QAAUmM,GACjBD,MAAM,OAAQpM,EAAOG,UAAUiF,EAAIrF,IACnCwF,QAAQ,YAAY,KAGzBwB,EAAM1D,SACNX,EAAMW,kCC5GFiJ,EAAQ,CACZC,KAAM,OACNC,KAAM,OACNC,KAAM,OACNC,KAAM,OACNC,KAAM,OACNC,KAAM,QAGR,SAASC,GAAWC,GAClBtM,IAAMsL,IAAI,OAAQgB,GAClB7M,EAAIoD,aAGe0J,oLAIjB,OACEC,EAAAC,EAAAC,cAAA,OAAKd,MAHO,CAAEe,QAAS,gBAIrBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEjK,IAAK,KACLkK,IAAK,KACLC,UAAU,EACVhB,MAAOA,EACPiB,KAAM,KACNC,SAAUX,GACVY,aAAc,KACdC,YAAa,CAAEC,OAAQ,QAASC,gBAAiB,oBAdnBC,IAAMC,qDCfzBC,oLACV,IACCC,EAAWC,KAAKC,MAAhBF,OAEFG,EAAU,GAMhB,OAJAH,EAAOtK,QAAQ,SAAC0K,EAAOhJ,GACrB+I,EAAQvK,KAAK,CAAEiC,MAAOT,EAAGiJ,MAAOD,EAAM9C,SAItC0B,EAAAC,EAAAC,cAACoB,GAAA,EAADpI,OAAAqI,OAAA,CACEf,SAAU,SAACrN,GAAc,IAAAqO,EACWR,EAAO7N,EAAU0F,OAA3CyF,EADekD,EACflD,KAAM9H,EADSgL,EACThL,KAERiL,EAHiBD,EACHlM,UAEYoM,MAAM,KAEtCzK,QAAQC,IAAIV,EAAM8H,EAAMmD,GAExBjO,IAAMsL,IAAI,oBAAqB2C,GAC/BxO,EAAIoD,UAGNsL,YAAa,qBACbC,WAAYC,KACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,oBAAoB,EACpBb,QAASA,EACTc,MAAO,SAACA,GAAD,OAAA/I,OAAAgJ,GAAA,EAAAhJ,CAAA,GACF+I,EADE,CAELE,aAAc,EACdnP,OAAOkG,OAAAgJ,GAAA,EAAAhJ,CAAA,GACF+I,EAAMjP,OADL,CAEJoP,SAAU,OACVC,SAAU,SACVC,UAAW,OACXC,UAAW,OACXC,UAAW,OACXC,UAAW,OACXC,UAAW,cAGXzB,KAAKC,eA3CwBL,IAAMC,eCD1B6B,oLACV,IACC/M,EAASqL,KAAKC,MAAdtL,KACFgN,EAAapP,IAAMC,IAAI,cAEvB6B,EAAY,GACZkB,EAAO0C,OAAO2J,KAAKjN,GAAMxC,OAAO,GACtC8F,OAAO2J,KAAKjN,EAAKY,IAAOE,QAAQ,SAAA3C,GACX,IAAfA,EAAIW,QACRY,EAAUsB,KAAK,CAAEiC,MAAO9E,EAAKsN,MAAOuB,EAAW7O,OAGjD,IAAMoN,EAAU7L,EAAUwN,KAAK,SAAC7C,EAAG8C,GAAJ,OAAU9C,EAAEoB,MAAQ0B,EAAE1B,OAAS,EAAI,IAElE,OACErB,EAAAC,EAAAC,cAACoB,GAAA,EAADpI,OAAAqI,OAAA,CAAQyB,SAAO,EACbrB,YAAa,sBACbC,WAAYC,KACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,oBAAoB,EACpBb,QAASA,EACTc,MAAO,SAACA,GAAD,OAAA/I,OAAAgJ,GAAA,EAAAhJ,CAAA,GACF+I,EADE,CAELE,aAAc,EACdnP,OAAOkG,OAAAgJ,GAAA,EAAAhJ,CAAA,GACF+I,EAAMjP,OADL,CAEJoP,SAAU,OACVC,SAAU,SACVC,UAAW,OACXC,UAAW,OACXC,UAAW,OACXC,UAAW,OACXC,UAAW,aAGflC,SAAU,SAACrN,EAAW8P,GACpBhM,QAAQC,IAAI+L,GAEZ,IAAM3N,EAAY,IAAIsJ,IAAIpL,IAAMC,IAAI,sBAIpC,OAFAwD,QAAQC,IAAI5B,GAEJ2N,EAAOA,QACb,IAAK,QACH3N,EAAU4N,QACV,MACF,IAAK,gBACH5N,EAAU4J,IAAI+D,EAAOE,OAAOtK,OAC5B,MACF,IAAK,eACH5B,QAAQC,IAAI+L,EAAOG,aAAavK,OAChCvD,EAAUuJ,OAAOoE,EAAOG,aAAavK,OACrC,MACF,IAAK,YACH5B,QAAQC,IAAI,qBAMhBD,QAAQC,IAAI5B,GAGZ9B,IAAMsL,IAAI,oBAAqBC,MAAMC,KAAK1J,IAC1CrC,EAAIoD,WAEF4K,KAAKC,eAnE0BL,IAAMC,4CCA5BuC,eACnB,SAAAA,EAAYnC,GAAO,IAAAoC,EAAA,OAAApK,OAAAqK,EAAA,EAAArK,CAAA+H,KAAAoC,IACjBC,EAAApK,OAAAsK,EAAA,EAAAtK,CAAA+H,KAAA/H,OAAAuK,EAAA,EAAAvK,CAAAmK,GAAA1G,KAAAsE,KAAMC,KACDwC,MAAQ,CAAEC,SAAS,GACxBL,EAAKM,aAAeN,EAAKM,aAAaC,KAAlB3K,OAAA4K,GAAA,EAAA5K,QAAA4K,GAAA,EAAA5K,CAAAoK,KAHHA,mFAMC,IACVK,EAAY1C,KAAKyC,MAAjBC,QACRnQ,IAAMsL,IAAI,eAAgB6E,wCAGfA,GACXnQ,IAAMsL,IAAI,eAAgB6E,GAC1B1C,KAAK8C,SAAS,CAAEJ,YAEhB1Q,EAAIoD,0CAGG,IACCsN,EAAY1C,KAAKyC,MAAjBC,QAER,OACE3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8D,GAAA/D,EAAD,CACEO,SAAUS,KAAK2C,aACfD,QAASA,EACTM,QAAQ,UACRC,SAAS,UACTC,cAAc,UACdC,eAAe,UACfC,eAAgB,GAChBC,eAAe,EACfC,aAAa,EACbC,UAAU,iCACVC,gBAAgB,sCAChB5P,OAAQ,GACRD,MAAO,GACPR,GAAI,kBAEN4L,EAAAC,EAAAC,cAAA,YAAOyD,EAAU,aAAe,uBAxCK9C,IAAM6D,kBCUnDlR,IAAM+D,OAAO,qBACb/D,IAAM+D,OAAO,gBACb/D,IAAMsL,IAAI,oBAAqB,CAAC,MAAO,MAAO,MAAO,QAIrD,IAAM6F,GAAe,CACnBC,YAAK,wBACLA,YAAK,0BACLC,YAAI,yBACJA,YAAI,yBACJA,YAAI,qBACJA,YAAI,uBAGNC,QAAQC,IAAIJ,IAAcK,KAAK,SAACC,GAAD,OAE/B,SAAoBrP,GAAM,IAAAsP,EAAAhM,OAAAC,EAAA,EAAAD,CACmDtD,EADnD,GACjB+H,EADiBuH,EAAA,GACP3P,EADO2P,EAAA,GACQC,EADRD,EAAA,GACoBtH,EADpBsH,EAAA,GACgClE,EADhCkE,EAAA,GACwClL,EADxCkL,EAAA,GAGlBE,ER+BD,SAA0B7P,GAC/B,SAAS8P,EAAaC,EAAW9O,GAC/B,IAAM4B,EAAIkN,EAAUC,QAAQ/O,GAC5B,OAAQ4B,EAAI,EAAKkN,EAAUlN,EAAI,GAAKkN,EAAU,GAGhD,IAAMF,EAAgB,GAChBE,EAAYpM,OAAO2J,KAAKtN,GAE9B,IAAK,IAAMiB,KAAQjB,EACjB,GAAIiB,IAAS8O,EAAU,GAGvB,IAAK,IAAM3O,KADXyO,EAAc5O,GAAQ,GACNjB,EAAciB,GAG5B,IAAK,IAAMK,KAFXuO,EAAc5O,GAAMG,GAAK,GAERpB,EAAciB,GAAMG,GAAI,CACvC,IAAM6O,EAAYjQ,EAAciB,GAAMG,GAChC8O,EAAYlQ,EAAc8P,EAAaC,EAAW9O,IAAOG,IAAM,GACrEyO,EAAc5O,GAAMG,GAAGE,GAAM2O,EAAU3O,IAAO4O,EAAU5O,IAAO,GAKrE,OAAOuO,EQvDeM,CAAiBnQ,GAEjCqN,EAAa,GACb+C,EAAa,GACbC,EAAa,GACnBhI,EAAWlH,QAAQ,SAACC,GAAD,OAAOgP,EAAWhP,EAAEkP,SAAWjS,EAAU+C,KAC5DqD,EAAQtD,QAAQ,SAACC,GAAD,OAAOiP,EAAWjP,EAAEpD,SAAWK,EAAU+C,KACzDwO,EAAWzO,QAAQ,SAAAC,GAAC,OAAIiM,EAAWjM,EAAEmP,OAASnP,EAAE2H,OAChD9K,IAAMsL,IAAI,aAAc8D,GAGxBlN,EAAMC,KAAK,SAAUJ,GAErBwE,EAAMpE,KAAK,SAAUyP,EAAepL,EAAS2L,GAC7C1S,EAAI0C,KAAK,OAAQgI,EAAUyH,EAAeO,GAE1C1O,QAAQC,IAAI8J,GAEZ+E,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,GAAD,CAAerQ,KAAML,IAAmBpB,EAAK,kBAC7D4R,IAASC,OAAOhG,EAAAC,EAAAC,cAACgG,GAAD,CAAalF,OAAQA,IAAY7M,EAAK,cACtD4R,IAASC,OAAOhG,EAAAC,EAAAC,cAACiG,GAAD,MAAqBhS,EAAK,oBAC1C4R,IAASC,OAAOhG,EAAAC,EAAAC,cAACkG,GAAD,MAAgBjS,EAAK,eA1BSkS,CAAWpB","file":"static/js/main.335303df.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport store from 'store';\n\nexport function tryNumber(value) {\n  return Number(value) || value;\n}\n\nexport const numColors = 9;\n\nexport const colors = {\n  map: d3.schemeBlues[numColors],\n  selection: d3.schemePaired.slice(2),\n};\n\nexport function getMigration(dataYear, country) {\n  const isEmigration = store.get('isEmigration');\n  return isEmigration ? dataYear['WORLD'][country] : dataYear[country]['Total'];\n}\n\nexport function countryName(code) {\n  const codeToName = store.get('codeToName');\n  return codeToName[code];\n}\n\nexport function filterNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    if (!isNaN(num) && num !== 0) {\n      res[key] = num;\n    }\n  }\n\n  return res;\n}\n\nexport function parseNaN(obj) {\n  const res = {};\n\n  for (const key in obj) {\n    const num = Number(obj[key]);\n    res[key] = num || obj[key];\n  }\n\n  return res;\n}\n\nexport function byId(id) {\n  return document.getElementById(id);\n}\n\nexport function createSVG(id, dims = { width: 400, height: 400 }, margins) {\n  const svg = d3.select(id).append('svg')\n    .attr('width', dims.width)\n    .attr('height', dims.height);\n\n  if (margins !== undefined) {\n    const group = svg.append('g')\n      .attr('class', 'main')\n      .attr('transform', `translate(${margins.left || 0},${margins.top || 0})`);\n    return group;\n  }\n\n  return svg;\n}\n\nexport function getMigrationDiff(migrationData) {\n  function previousYear(dataYears, year) {\n    const i = dataYears.indexOf(year);\n    return (i > 0) ? dataYears[i - 1] : dataYears[0];\n  }\n\n  const migrationDiff = {};\n  const dataYears = Object.keys(migrationData);\n\n  for (const year in migrationData) {\n    if (year === dataYears[0]) continue;\n\n    migrationDiff[year] = {};\n    for (const c in migrationData[year]) {\n      migrationDiff[year][c] = {};\n\n      for (const c2 in migrationData[year][c]) {\n        const thisValue = migrationData[year][c];\n        const prevValue = migrationData[previousYear(dataYears, year)][c] || {};\n        migrationDiff[year][c][c2] = thisValue[c2] - (prevValue[c2] || 0);\n      }\n    }\n  }\n\n  return migrationDiff;\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, countryName } from '../helpers';\n\nexport default {\n  draw: drawChord,\n  update: updateChord,\n};\n\nlet chordSVG;\nlet countries, migrationData;\n\nlet outerRadius, innerRadius;\n\nfunction getChordMatrix() {\n  countries = store.get('selectedCountries');\n  //countries = Object.keys(migrationData[2010]['WORLD']).slice(200, 230);\n\n  const isEmigration = store.get('isEmigration');\n  const year = store.get('year') || 2010;\n  const matrix = [];\n\n  function getValue(c, c2) {\n    let val;\n    try {\n      val = isEmigration ? migrationData[year][c2][c] : migrationData[year][c][c2];\n    } catch (error) {\n      val = 0;\n    }\n    return val || 0;\n  }\n\n  countries.forEach(c => {\n    matrix.push(countries.map(c2 => getValue(c, c2)));\n  });\n\n  return matrix;\n}\n\nexport function drawChord(id, data) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  chordSVG = createSVG(id, { width, height });\n  outerRadius = Math.min(width, height) * 0.5;\n  innerRadius = outerRadius - 20;\n\n  migrationData = data;\n\n  chordSVG.attr('viewBox', [-width / 2, -height / 2, width, height]);\n  chordSVG.append('g').attr('class', 'nodes');\n  chordSVG.append('g').attr('class', 'arcs');\n\n  updateChord();\n}\n\nexport function updateChord() {\n  console.log('updating chord...');\n\n  const groupNodes = chordSVG.select('.nodes');\n  const groupArcs = chordSVG.select('.arcs');\n\n  groupNodes.selectAll('.node').remove();\n  groupArcs.selectAll('.arc').remove();\n\n  const myChord = d3.chord().padAngle(0.02);\n\n  const chords = myChord(getChordMatrix());\n  const ribbon = d3.ribbon().radius(innerRadius);\n\n  const color = d3.scaleOrdinal()\n    .domain(d3.range(9))\n    .range(colors.selection);\n\n  const arc = d3.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  groupNodes.selectAll('g')\n    .data(chords.groups)\n    .enter().append('g')\n    .attr('class', 'node')\n    .append('path')\n    .attr('fill', (d, i) => color(i))\n    .attr('stroke', (d, i) => color(i))\n    .attr('d', arc)\n    .on('mouseover', mouseover)\n    .on('mouseout', mouseout)\n    .append('title').text(d => `${countryName(countries[d.index])}: ${d3.format('~s')(d.value)}`);\n\n  groupArcs.selectAll('path')\n    .data(chords)\n    .enter().append('path')\n    .attr('class', 'arc')\n    .attr('d', ribbon)\n    .attr('fill', d => color(d.target.index))\n    // .attr('stroke', d => d3.rgb(color(d.target.index)).darker())\n    .append('title').text(d => makeTitle(d));\n\n  function makeTitle(d) {\n    const isEmigration = store.get('isEmigration');\n    const countryOrder = isEmigration ? [d.source, d.target] : [d.target, d.source];\n    const valueOrder = [d.source, d.target];\n    const [c1, c2] = countryOrder.map(el => countryName(countries[el.index]));\n    const [v1, v2] = valueOrder.map(el => d3.format('~s')(el.value));\n    return `${c1} > ${c2}: ${v1}\\n${c2} > ${c1}: ${v2}`;\n  }\n\n  function mouseover(d, i) {\n    //const t = d.value; // threshold\n    const s = groupArcs.selectAll('.arc');\n    s.classed('fade', (p) => p.source.index !== i && p.target.index !== i);\n    s.classed('show', (p) => p.source.index === i);\n  }\n\n  function mouseout(d, i) {\n    groupArcs.selectAll('.arc.show').classed('show', false);\n    groupArcs.selectAll('.arc.fade').classed('fade', false);\n  }\n\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName, parseNaN, getMigration } from '../helpers';\n\nexport default {\n  draw: drawGraph,\n  update: updateGraph,\n};\n\nconst margin = { top: 10, right: 20, bottom: 20, left: 40 };\n\nlet graphSVG;\nlet svgDims;\nlet selectedCountries;\nlet compareData, migrationData, populationData;\n\nconst metrics = [\n  'GDP per capita',\n  'Social support',\n  'Healthy life expectancy',\n  'Freedom to make life choices',\n  'Perceptions of corruption',\n  // 'Confidence in government',\n];\n\nfunction loadDataset() {\n  const dataset = {};\n  if (!selectedCountries || selectedCountries.length === 0) return [];\n\n  for (let c of selectedCountries) {\n    const country = [];\n    for (let year in migrationData) {\n      const dataYear = migrationData[year];\n      if (dataYear[c] === undefined) continue; // no data\n\n      const migrants = Number(getMigration(dataYear, c));\n      const pop = populationData[c][year] * 1000;\n      const data = migrants /*/ pop*/;\n\n      country.push({ year: Number(year), value: Number(data) });\n    }\n    dataset[c] = country;\n  }\n\n  return dataset;\n}\n\nfunction loadCompareDataset() {\n  const dataset = {};\n  compareData.forEach(entry => {\n    if (dataset[entry.country] === undefined) {\n      dataset[entry.country] = [];\n    }\n    dataset[entry.country].push(parseNaN(entry));\n  });\n  return dataset;\n}\n\nexport function drawGraph(id, data, whrData, pop) {\n  const el = document.querySelector(id);\n  svgDims = { width: el.clientWidth, height: el.clientHeight };\n\n  graphSVG = createSVG(id, svgDims, margin);\n  migrationData = data;\n  populationData = pop;\n  compareData = whrData;\n\n  updateGraph();\n}\n\nexport function updateGraph() {\n  console.log('updating graph...');\n\n  const\n    width = svgDims.width - margin.left - margin.right,\n    height = svgDims.height - margin.top - margin.bottom;\n\n  selectedCountries = store.get('selectedCountries');\n\n  const dataset = loadDataset();\n  const compareDataset = loadCompareDataset();\n\n  const flatData = Object.values(dataset).reduce((acc, d) => acc.concat(d), []);\n\n  const axisDomain = (data, fn) => [d3.min(data, fn), d3.max(data, fn)];\n\n  const yearScale = d3.scaleLinear()\n    .domain(axisDomain(flatData, d => d.year)).nice()\n    .range([0, width]);\n\n  const migrantsScale = d3.scaleLinear()\n    .domain(axisDomain(flatData, d => d.value)).nice()\n    .range([height, 0]);\n\n  // scale for each metric\n  const metricsScale = metrics.map(metric =>\n    d3.scaleLinear()\n      .domain(axisDomain(compareData, d => +d[metric])).nice()\n      .range([height, 0]));\n\n  const xAxis = d3.axisBottom(yearScale).tickFormat(d3.format('d'));\n  const yAxis1 = d3.axisLeft(migrantsScale).tickFormat(d3.format('~s'));\n  //const yAxis2 = d3.axisRight(yScale2).tickFormat(d3.format('~s'));\n\n  const line = d3.line()\n    .x(d => yearScale(d.year))\n    .y(d => migrantsScale(d.value))\n    .curve(d3.curveMonotoneX);\n\n  // CLEAR OLD ELEMENTS\n\n  graphSVG.selectAll('.country').remove();\n  graphSVG.selectAll('.xAxis').remove();\n  graphSVG.selectAll('.yAxis').remove();\n\n  // CREATE NEW ELEMENTS\n\n  graphSVG.append('g')\n    .attr('class', 'xAxis')\n    .attr('transform', `translate(0,${height})`)\n    .call(xAxis);\n\n  graphSVG.append('g')\n    .attr('class', 'yAxis')\n    .call(yAxis1);\n\n  // graphSVG.append('g')\n  //   .attr('class', 'yAxis')\n  //   .attr('transform', `translate(${width},${0})`)\n  //   .call(yAxis2);\n\n  const ms = store.get('isEmigration') ? 'emigration' : 'immigration';\n\n  const countriesGroup = graphSVG.append('g')\n    .attr('class', 'countries');\n\n  function showMetrics(g) {\n    countriesGroup.attr('visibility', 'hidden');\n    g.attr('visibility', 'visible');\n    g.selectAll('.selected').classed('selected', false);\n    g.selectAll('.metrics').classed('selected', true);\n  }\n\n  function hideMetrics(g) {\n    d3.event.preventDefault();\n    countriesGroup.attr('visibility', 'visible');\n    g.attr('visibility', null);\n    g.selectAll('.selected').classed('selected', false);\n    g.selectAll('.metrics').attr('visibility', 'hidden');\n  }\n\n  let i = 0;\n  for (const country in dataset) {\n    const countryData = dataset[country];\n    const color = colors.selection[i++ % numColors];\n    const coName = countryName(country);\n\n    if (!countryData) break;\n\n    const countryGroup = countriesGroup.append('g')\n      .attr('id', country)\n      .attr('class', 'country')\n      .attr('name', coName);\n\n    countryGroup.append('path')  // line\n      .datum(countryData)\n      .attr('class', 'line')\n      .attr('stroke', color)\n      .attr('d', line)\n      .on('click', () => showMetrics(countryGroup))\n      .on('contextmenu', () => hideMetrics(countryGroup))\n      .on('mouseenter', () => countryGroup.selectAll('.metrics').attr('visibility', 'visible'))\n      .on('mouseout', () => countryGroup.selectAll('.metrics').attr('visibility', 'hidden'))\n      .append('title').text(() => `${coName} ${ms} line`);\n\n    countryGroup.append('g')    // line dots\n      .attr('class', 'dots')\n      .attr('fill', color)\n      .attr('stroke', color)\n      .selectAll().data(countryData)\n      .enter().append('circle')\n      .attr('cx', (d) => yearScale(d.year))\n      .attr('cy', (d) => migrantsScale(d.value))\n      .attr('r', 3)\n      .append('title').text(d => `${coName} (${d.year}): ${d3.format('~s')(d.value)}`);\n\n    // correlation data\n\n    if (!compareDataset[country]) break;\n\n    const metricsGroup = countryGroup.append('g')\n      .attr('class', 'metrics')\n      .attr('visibility', 'hidden');\n\n    metrics.forEach((met, i) => {\n      const color = d3.interpolateRainbow(i / metrics.length);\n\n      const line = d3.line()\n        .x(d => yearScale(d.year))\n        .y(d => metricsScale[i](d[met]))\n        .defined(d => d[met])\n        .curve(d3.curveMonotoneX);\n\n      const metricGroup = metricsGroup.append('g')\n        .attr('class', 'metric');\n\n      metricGroup.append('path')  // line\n        .datum(compareDataset[country])\n        .attr('stroke', color)\n        .attr('fill', 'none')\n        .attr('opacity', 0.8)\n        .attr('d', line)\n        .append('title').text(() => met);\n\n      metricGroup.append('g')    // correlation circles\n        .attr('fill', color)\n        .attr('stroke', color)\n        .selectAll('circle')\n        .data(compareDataset[country])\n        .enter().append('circle')\n        .attr('class', 'circle')\n        .attr('cx', d => yearScale(d.year))\n        .attr('cy', d => metricsScale[i](d[met]))\n        .attr('r', d => d[met] === '' ? 0 : 3)\n        .append('title').text(d => `${coName} (${d.year}): ${d[met]} ${met}`);\n    });\n  }\n}\n","import * as d3 from 'd3';\nimport store from 'store';\nimport { createSVG, colors, numColors, countryName, getMigration } from '../helpers';\nimport { graph, chord } from '../idioms';\n\nexport default {\n  draw: drawMap,\n  update: updateMap,\n};\n\nlet mapSVG;\nlet migrationData, populationData;\n\nfunction mouseIn() { }\n\nfunction mouseOut() { }\n\nfunction clickRight(d) {\n  d3.event.preventDefault();\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.delete(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\nfunction clickLeft(d) {\n  const forbidden = ['UNK', 'TWN', 'ATA'];\n  if (forbidden.includes(d.id)) return;\n\n  const selectedCountries = new Set(store.get('selectedCountries'));\n  selectedCountries.add(d.id);\n  store.set('selectedCountries', Array.from(selectedCountries));\n\n  updateMap();\n}\n\n\n\nexport function drawMap(id, topology, data, population) {\n  const el = document.querySelector(id);\n  const [width, height] = [el.clientWidth, el.clientHeight];\n\n  mapSVG = createSVG(id, { width, height });\n\n  migrationData = data;\n  populationData = population;\n\n  const projection = d3.geoEquirectangular()\n    .scale(width / 5)\n    .translate([width / 2, height / 0.8]);\n\n  const path = d3.geoPath().projection(projection);\n  const zoom = d3.zoom()\n    .scaleExtent([0.6, 7])\n    .on('zoom', zoomed);\n\n  mapSVG.call(zoom);\n\n  const map = mapSVG.append('g').attr('class', 'countries');\n  map\n    .selectAll('path')\n    .data(topology.features)\n    .enter().append('path')\n    .attr('id', (d) => d.id)\n    .attr('name', (d) => d.properties.name)\n    .attr('d', path)\n    .on('click', clickLeft)\n    .on('mouseover', mouseIn)\n    .on('mouseout', mouseOut)\n    .on('contextmenu', clickRight)\n    .append('title').text(d => `${d.id}: ${d.properties.name}`);\n\n  function zoomed() {\n    map.selectAll('path')\n      .attr('transform', d3.event.transform);\n  }\n\n  updateMap();\n}\n\nexport function updateMap() {\n  console.log('updating map...');\n\n  const selectedCountries = store.get('selectedCountries') || [];\n  const year = store.get('year') || 2010;\n  const dataYear = migrationData[year];\n\n  function getMigrants(d) {\n    if (dataYear[d.id] === undefined) return 0; // no data\n    const migrants = getMigration(dataYear, d.id);\n    const pop = populationData[d.id][year];\n\n    return migrants / pop || 0;\n  }\n\n  const color = d3.scaleThreshold()\n    .domain([-20, -10, -5, -2.5, 0, 2.5, 5, 10, 20])\n    .range(colors.map);\n\n  mapSVG.selectAll('path')\n    // .transition().duration(600)\n    .style('fill', (d) => color(getMigrants(d)))\n    .select('title').text(d =>\n      `${countryName(d.id)}: ${d3.format('.1f')(getMigrants(d))}/1000 population`\n    );\n\n  d3.selectAll('.selected').classed('selected', false);\n  selectedCountries.forEach((countryID, i) => {\n    d3.select('path#' + countryID)\n      .style('fill', colors.selection[i % numColors])\n      .classed('selected', true);\n  });\n\n  graph.update();\n  chord.update();\n}\n","import React from 'react';\nimport store from 'store';\nimport Slider from 'rc-slider';\nimport { map } from '../idioms';\n\nimport 'rc-slider/assets/index.css';\nimport './YearSlider.css';\n\nconst marks = {\n  1995: '1995',\n  2000: '2000',\n  2005: '2005',\n  2010: '2010',\n  2015: '2015',\n  2017: '2017',\n};\n\nfunction yearChange(params) {\n  store.set('year', params);\n  map.update();\n}\n\nexport default class YearSlider extends React.PureComponent {\n  render() {\n    const style = { padding: '0.4em 2em 0' };\n\n    return (\n      <div style={style}>\n        <Slider\n          min={1995}\n          max={2017}\n          included={false}\n          marks={marks}\n          step={null}\n          onChange={yearChange}\n          defaultValue={2010}\n          handleStyle={{ border: 'white', backgroundColor: 'silver' }} />\n      </div>\n    );\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\n\nimport { map } from '../idioms';\n\nexport default class EventSelect extends React.PureComponent {\n  render() {\n    const { events } = this.props;\n\n    const options = [];\n\n    events.forEach((event, i) => {\n      options.push({ value: i, label: event.name });\n    });\n\n    return (\n      <Select\n        onChange={(selection) => {\n          const { name, year, countries } = events[selection.value];\n\n          const countriesList = countries.split(',')\n\n          console.log(year, name, countriesList);\n\n          store.set('selectedCountries', countriesList);\n          map.update();\n\n        }}\n        placeholder={'Select an event...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        {...this.props}\n      />);\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\nimport { map } from '../idioms';\n\nexport default class CountrySelect extends React.PureComponent {\n  render() {\n    const { data } = this.props;\n    const codeToName = store.get('codeToName');\n\n    const countries = [];\n    const year = Object.keys(data).slice(-1);\n    Object.keys(data[year]).forEach(key => {\n      if (key.length !== 3) return;\n      countries.push({ value: key, label: codeToName[key] });\n    });\n\n    const options = countries.sort((a, b) => a.label < b.label ? -1 : 1);\n\n    return (\n      <Select isMulti\n        placeholder={'Select countries...'}\n        components={makeAnimated}\n        onBlurResetsInput={false}\n        onSelectResetsInput={false}\n        onCloseResetsInput={false}\n        options={options}\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            neutral0: '#333',\n            neutral5: 'orange',\n            neutral10: '#666',\n            neutral20: '#666',\n            primary25: '#666',\n            neutral50: '#eee',\n            neutral80: 'white'\n          }\n        })}\n        onChange={(selection, action) => {\n          console.log(action);\n\n          const countries = new Set(store.get('selectedCountries'));\n\n          console.log(countries);\n\n          switch (action.action) {\n            case 'clear':\n              countries.clear();\n              break;\n            case 'select-option':\n              countries.add(action.option.value);\n              break;\n            case 'remove-value':\n              console.log(action.removedValue.value);\n              countries.delete(action.removedValue.value);\n              break;\n            case 'set-value':\n              console.log('wut, is possibru?');\n              break;\n            default:\n              break;\n          }\n\n          console.log(countries);\n\n\n          store.set('selectedCountries', Array.from(countries));\n          map.update();\n        }}\n        {...this.props}\n      />);\n  }\n}\n","import React from 'react';\nimport store from 'store';\nimport Switch from 'react-switch';\n\nimport { map } from '../idioms';\n\nexport default class MigrationSwitch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { checked } = this.state;\n    store.set('isEmigration', checked);\n  }\n\n  handleChange(checked) {\n    store.set('isEmigration', checked);\n    this.setState({ checked });\n\n    map.update(); // map updates others\n  }\n\n  render() {\n    const { checked } = this.state;\n\n    return (\n      <div>\n        <Switch\n          onChange={this.handleChange}\n          checked={checked}\n          onColor=\"#FFAB91\"\n          offColor=\"#FFAB91\"\n          onHandleColor=\"#FF8A65\"\n          offHandleColor=\"#FF8A65\"\n          handleDiameter={24}\n          uncheckedIcon={false}\n          checkedIcon={false}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n          height={16}\n          width={64}\n          id={'mySwitcherino'}\n        />\n        <span>{checked ? 'Emigration' : 'Immigration'}</span>\n      </div>\n    );\n  }\n}\n","import store from 'store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { tsv, json } from 'd3-fetch';\n\nimport YearSlider from './components/YearSlider';\nimport EventSelect from './components/EventSelect';\nimport CountrySelect from './components/CountrySelect';\nimport MigrationSwitch from './components/MigrationSwitch';\nimport { chord, graph, map } from './idioms';\nimport { byId, filterNaN, getMigrationDiff } from './helpers';\n\nimport './index.css';\n\n// STARTUP\n\nstore.remove('selectedCountries');\nstore.remove('isEmigration');\nstore.set('selectedCountries', ['PRT', 'ESP', 'FRA', 'DEU']);\n\n// DYNAMIC REAL DATA\n\nconst filesPromise = [\n  json('./data/topology.json'),\n  json('./data/migrations.json'),\n  tsv('./data/conversion.tsv'),\n  tsv('./data/population.tsv'),\n  tsv('./data/events.tsv'),\n  tsv('./data/whr2018.tsv'),\n];\n\nPromise.all(filesPromise).then((dataResults) => handleData(dataResults));\n\nfunction handleData(data) {\n  const [topology, migrationData, conversion, population, events, whrData] = data;\n\n  const migrationDiff = getMigrationDiff(migrationData);\n\n  const codeToName = {};\n  const countryPop = {};\n  const countryWHR = {};\n  population.forEach((c) => countryPop[c.Country] = filterNaN(c));\n  whrData.forEach((c) => countryWHR[c.country] = filterNaN(c));\n  conversion.forEach(c => codeToName[c.code3] = c.name);\n  store.set('codeToName', codeToName);\n\n  // order is important, sadly\n  chord.draw('#chord', migrationData);\n  //plot.draw('#plot', whrData);\n  graph.draw('#graph', migrationDiff, whrData, countryPop);\n  map.draw('#map', topology, migrationDiff, countryPop);\n\n  console.log(events);\n\n  ReactDOM.render(<CountrySelect data={migrationData} />, byId('countrySelect'));\n  ReactDOM.render(<EventSelect events={events} />, byId('eventList'));\n  ReactDOM.render(<MigrationSwitch />, byId('migrationSwitch'));\n  ReactDOM.render(<YearSlider />, byId('yearSlider'));\n}\n"],"sourceRoot":""}